# This RestAPI and template sensors provide soil data using the Agromonitoring API
- sensor:
    - name: Soil Temperature at 10cm
      unit_of_measurement: "K"
      device_class: temperature
      state_class: measurement
      availability: "{{ state_attr('sensor.agromonitoring','t10') is not none }}"
      state: "{{ state_attr('sensor.agromonitoring', 't10') | float(0) | round(2) }}"
    - name: Soil Temperature at 10cm F
      unit_of_measurement: "°F"
      device_class: temperature
      state_class: measurement
      availability: "{{ has_value('sensor.soil_temperature_at_10cm') }}"
      state: >-
        {% from "macros.jinja" import convert_temp %}
        {{ convert_temp(states("sensor.soil_temperature_at_10cm"), "k", "f") }}
    - name: Soil Moisture
      unit_of_measurement: "VWC"
      availability: "{{ state_attr('sensor.agromonitoring','moisture') is not none }}"
      state: "{{ state_attr('sensor.agromonitoring', 'moisture') | float(0) }}"
    - name: Soil Moisture Pct
      unit_of_measurement: "%"
      availability: "{{ has_value('sensor.soil_moisture') }}"
      state: "{{ states('sensor.soil_moisture') | float(0) * 100 }}"
    - name: Soil Surface Temperature
      unit_of_measurement: "K"
      device_class: temperature
      state_class: measurement
      availability: "{{ state_attr('sensor.agromonitoring','t0') is not none }}"
      state: "{{ state_attr('sensor.agromonitoring', 't0') | float(0) | round(2) }}"
    - name: Soil Surface Temperature F
      unit_of_measurement: "°F"
      device_class: temperature
      state_class: measurement
      availability: "{{ has_value('sensor.soil_surface_temperature') }}"
      state: >-
        {% from "macros.jinja" import convert_temp %}
        {{ convert_temp(states("sensor.soil_surface_temperature"), "k", "f") }}

# RV connectivity
- trigger:
    - platform: state
      entity_id: sensor.rv_last_seen
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: RV Online
      device_class: connectivity
      availability: "{{ has_value('sensor.rv_last_seen') }}"
      state: "{{ trigger.platform == 'state' }}"
      delay_off:
        minutes: 2

# Sunny outside with delay
- binary_sensor:
    - name: Sunny
      unique_id: 232a257d-23f2-4489-9de4-cab65a2d30c3
      delay_on: "00:05:00"
      delay_off: "00:05:00"
      state: >-
        {{ has_value("sensor.light_sensor_illuminance") and float(state_attr("sun.sun", "elevation"), 0) > 3
            and float(states("sensor.light_sensor_illuminance"), 0) > 500 }}

- trigger:
    - platform: state
      entity_id:
        - schedule.daytime
        - schedule.evening
        - input_boolean.daytime_override
        - calendar.holidays_in_united_states
    - platform: time
      at: "06:30:00"
    - platform: time
      at: "18:30:00"
    - platform: time
      at: "20:30:00"
    - platform: time
      at: "00:00:15"
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: Daytime
      state: >-
        {% set daytime = is_state('schedule.daytime','on') %}
        {% set is_holiday = is_state('calendar.holidays_in_united_states','on') %}
        {% set holiday_time = now() > today_at('06:30') and now() < today_at('20:30') %}
        {% set evening = is_state('schedule.evening','on') %}
        {% set override = is_state('input_boolean.daytime_override','on') %}
        {% set late = now() > today_at('18:30') %}
        {% set normal_daytime = daytime and not is_holiday %}
        {% set holiday_daytime = holiday_time and is_holiday %}
        {% set no_late_override = not (override and late) %}
        {% set special_override = not evening and override and not late %}
        {{ special_override or ((normal_daytime or holiday_daytime) and no_late_override) }}
    - name: Evening
      state: >-
        {% set daytime = is_state('schedule.daytime','on') %}
        {% set evening = is_state('schedule.evening','on') %}
        {% set override = is_state('input_boolean.daytime_override','on') %}
        {% set late = now() > today_at('18:30') %}
        {{ evening or override and late }}

- sensor:
    - name: Humidity Ratio
      availability: >-
        {{ has_value('sensor.outdoor_thermometer_humidity') and has_value('sensor.downstairs_thermostat_current_humidity') }}
      state: >-
        {% set a = states('sensor.outdoor_thermometer_humidity') | float(0) %}
        {% set b = states('sensor.downstairs_thermostat_current_humidity') | float(0) %}
        {{ (a / b) if b > 0 else none }}

# Hot inside with delay
- binary_sensor:
    - name: Hot Inside
      unique_id: 41ae9c0f-8726-42a9-b772-6cd1a16e48a0
      device_class: heat
      delay_on: "00:15:00"
      delay_off: "00:15:00"
      availability: >-
        {{ has_value("input_number.downstairs_temperature")
           and state_attr("climate.downstairs_thermostat", "current_temperature") is not none
           and state_attr("climate.upstairs_thermostat", "current_temperature") is not none
           and has_value("sensor.outdoor_thermometer_state") }}
      state: >-
        {% set downstairs = state_attr("climate.downstairs_thermostat","current_temperature") | float(0) %}
        {% set upstairs   = state_attr("climate.upstairs_thermostat","current_temperature")   | float(0) %}
        {% set target     = states("input_number.downstairs_temperature")                     | float(0) %}
        {% set outdoor    = states("sensor.outdoor_thermometer_state")                        | float(0) %}
        {{ (downstairs - target > 1 and upstairs - target > 2) or (outdoor > downstairs) }}

# Hot in study with delay
- binary_sensor:
    - name: Hot In Study
      unique_id: dbca2e5b-24e6-44f9-a045-73512cfb6b6b
      device_class: heat
      delay_on: "00:15:00"
      delay_off: "00:15:00"
      availability: >-
        {{ has_value("sensor.chicken_coop_temperature_state")
           and has_value("sensor.outdoor_thermometer_state")
           and has_value("input_number.downstairs_temperature") }}
      state: >-
        {% set temp = states("sensor.chicken_coop_temperature_state") | float(0) %}
        {% set outside_temp = states("sensor.outdoor_thermometer_state") | float(0) %}
        {% set target_temp = states("input_number.downstairs_temperature") | float(0) %}
        {{ temp > target_temp + 1 or outside_temp > temp }}

# Eleanor Presence with delay off
- binary_sensor:
    - name: Eleanor Presence Delay
      unique_id: d050ef60-2710-4ceb-aac9-2f42644a04c0
      device_class: presence
      delay_off: "00:15:00"
      state: "{{ is_state('binary_sensor.eleanor_presence_presence_information', 'on') }}"
      availability: "{{ has_value('binary_sensor.eleanor_presence_presence_information') }}"

# Michael Presence with delay off
- binary_sensor:
    - name: Michael Presence Delay
      unique_id: bea65138-65a1-4ee8-84e3-a84cf293211b
      device_class: presence
      delay_off: "00:15:00"
      state: "{{ is_state('binary_sensor.michael_presence_presence_information', 'on') }}"
      availability: "{{ has_value('binary_sensor.michael_presence_presence_information') }}"

# Guest Presence with delay off
- binary_sensor:
    - name: Guest Bedroom Presence Delay
      unique_id: c30c13f6-f33a-40b3-9204-5315d204f46d
      device_class: presence
      delay_off: "00:15:00"
      state: "{{ is_state('binary_sensor.guest_bedroom_presence_presence_sensor_1', 'on') }}"
      availability: "{{ has_value('binary_sensor.guest_bedroom_presence_presence_sensor_1') }}"

# Adds a power attribute to the dehumidifier switch
- binary_sensor:
    - name: Living Room Dehumidifier
      unique_id: f239689e-3f7e-479a-8f5f-a36dfb83f0f4
      availability: "{{ has_value('switch.living_room_dehumidifier') and has_value('sensor.living_room_dehumidifier_power') }}"
      state: "{{ is_state('switch.living_room_dehumidifier', 'on') if has_value('switch.living_room_dehumidifier') else false }}"
      attributes:
        power: "{{ states('sensor.living_room_dehumidifier_power') | float(0) }}"

# Template for determinining if this is a before-school time
- trigger:
    - platform: time
      at: "06:00:00"
    - platform: time
      at: "08:15:00"
    - platform: time
      at: "08:00:15"
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: Before School Time
      unique_id: d0ae7e0d-6d84-492c-bcab-ba13133e7b60
      state: >-
        {% set dt = now() %}
        {% set school_year = dt.month <= 6 or dt.month >= 9 %}
        {% set weekday = dt.weekday() <= 4 %}
        {% set morning = dt >= today_at("06:00") and dt <= today_at("08:15") %}
        {{ school_year and weekday and morning }}

# Reports problems for some sensors
- trigger:
    - trigger: time_pattern
      hours: /3
  sensor:
    - name: Sensor Problems
      unique_id: c84e48cc-b07f-47e2-8413-4752866332f2
      state: >-
        {% set sensors = [
          "sensor.acurite_tower_a_11075_temperature",
          "sensor.ambientweather_wh31e_1_167_temperature",
          "sensor.water_barrel_fill_level",
          "light.chicken_coop_light",
          "sensor.outside_brightness",
          "sensor.light_sensor_illuminance",
          "binary_sensor.rain_sensor_moisture",
        ] %}
        {% set ns = namespace(any_bad=false) %}
        {% for s in sensors %}
          {% if not has_value(s) %}
            {% set ns.any_bad = true %}
          {% endif %}
        {% endfor %}
        {{ "on" if ns.any_bad else "off" }}
      attributes:
        problems: >-
          {% set sensors = [
            "sensor.acurite_tower_a_11075_temperature",
            "sensor.ambientweather_wh31e_1_167_temperature",
            "sensor.water_barrel_fill_level",
            "light.chicken_coop_light",
            "sensor.outside_brightness",
            "sensor.light_sensor_illuminance",
            "binary_sensor.rain_sensor_moisture",
          ] %}
          {% set ns = namespace(data=[]) %}
          {% for s in sensors %}
            {% if not has_value(s) %}
              {% set ns.data = ns.data + [s] %}
            {% endif %}
          {% endfor %}
          {{ ns.data }}

# Mimics the behavior of the flag light (on when dark [30 lx], off when <150 lx if already on)
- trigger:
    - platform: state
      entity_id: sensor.light_sensor_illuminance
  binary_sensor:
    - name: Dark Outside
      unique_id: c0fa4158-6312-45d3-bdd3-74f224d8d71a
      state: >-
        {% set entity = "sensor.light_sensor_illuminance" %}
        {% set was_dark = (this.state | default("off") | string | lower) == "on" %}
        {% if has_value(entity) %}
          {% set ill = states(entity) | float(0) %}
          {{ ill < 30 or (was_dark and ill < 150) }}
        {% else %}
          false
        {% endif %}

# Remembers the state of the living room light sensor
- trigger:
    - platform: state
      entity_id: sensor.everything_presence_one_6dbad0_illuminance
  sensor:
    - name: Living Room Illuminance State
      unique_id: 68f8d798-079f-4a74-9a67-6f65c7943068
      device_class: illuminance
      unit_of_measurement: lx
      state_class: measurement
      state: >-
        {% set s = trigger.to_state.state %}
        {% if s not in ["unknown","unavailable","none",""] %}
          {{ s | float(0) }}
        {% else %}
          {{ states(this.entity_id) }}
        {% endif %}
      availability: >-
        {{ has_value("sensor.everything_presence_one_6dbad0_illuminance") and has_value(this.entity_id) }}

# Remembers the state of the outdoor thermometer (temperature)
- trigger:
    - platform: state
      entity_id: sensor.acurite_tower_a_11075_temperature
    - platform: homeassistant
      event: start
  sensor:
    - name: Outside Temperature State
      unique_id: 25bd1829-8f7e-4a37-bf23-f71626347eb3
      device_class: temperature
      unit_of_measurement: "°F"
      state_class: measurement
      state: >-
        {% set s = states('sensor.acurite_tower_a_11075_temperature') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.acurite_tower_a_11075_temperature')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the outdoor thermometer (humidity)
- trigger:
    - platform: state
      entity_id: sensor.acurite_tower_a_11075_humidity
    - platform: homeassistant
      event: start
  sensor:
    - name: Outside Humidity State
      unique_id: ed61e0eb-7172-4572-8958-c41a897d0d89
      device_class: humidity
      unit_of_measurement: "%"
      state_class: measurement
      state: >-
        {% set s = states('sensor.acurite_tower_a_11075_humidity') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.acurite_tower_a_11075_humidity')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the incoming water temperature
- trigger:
    - platform: state
      entity_id: sensor.outside_water_temperature
    - platform: homeassistant
      event: start
  sensor:
    - name: Outside Water Temperature State
      unique_id: fb3bcf0e-1bc8-45dc-acdd-a5f11fac05c2
      device_class: temperature
      unit_of_measurement: "°F"
      state_class: measurement
      state: >-
        {% set s = states('sensor.outside_water_temperature') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.outside_water_temperature')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the incoming water humidity
- trigger:
    - platform: state
      entity_id: sensor.outside_water_humidity
    - platform: homeassistant
      event: start
  sensor:
    - name: Outside Water Humidity State
      unique_id: 89455e7d-1d4c-4ecd-a9ea-3cb9b9f74997
      device_class: humidity
      unit_of_measurement: "%"
      state_class: measurement
      state: >-
        {% set s = states('sensor.outside_water_humidity') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.outside_water_humidity')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the incoming water pressure
- trigger:
    - platform: state
      entity_id: sensor.outside_water_pressure
    - platform: homeassistant
      event: start
  sensor:
    - name: Outside Water pressure State
      unique_id: 67d0b02d-a93e-4799-ad20-b02387b0b8ff
      device_class: pressure
      unit_of_measurement: "psi"
      state_class: measurement
      state: >-
        {% set s = states('sensor.outside_water_pressure') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.outside_water_pressure')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the chicken coop thermometer temperature
- trigger:
    - platform: state
      entity_id: sensor.chicken_coop_thermometer_temperature
    - platform: homeassistant
      event: start
  sensor:
    - name: Chicken Coop Temperature State
      device_class: temperature
      unit_of_measurement: "°F"
      state_class: measurement
      state: >-
        {% set s = states('sensor.chicken_coop_thermometer_temperature') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('sensor.chicken_coop_thermometer_temperature')
            or (this.state not in ['unknown','unavailable']) }}

# Remembers the state of the living room light
- trigger:
    - platform: state
      entity_id: light.living_room_light
    - platform: homeassistant
      event: start
  sensor:
    - name: Living Room Brightness
      unit_of_measurement: "%"
      state_class: measurement
      state: >-
        {% set s = state_attr('light.living_room_light', 'brightness') %}
        {% set v = s | float(none) %}
        {{ this.state if v is none else v }}
      availability: >-
        {{ has_value('light.living_room_light')
            or (this.state not in ['unknown','unavailable']) }}

# These sensors summarize Zwift usage data
- sensor:
    - name: Zwift Total Distance
      unique_id: 016f58ec-6828-4ea3-8944-8aa9c6232b2d
      device_class: distance
      unit_of_measurement: "m"
      state: "{{ state_attr('sensor.zwift_online_1747373', 'totalDistance') | float(0) }}"
    - name: Zwift Total Elevation
      unique_id: 2e2493a3-e7a6-474c-ae5f-c76b0675ae25
      device_class: distance
      unit_of_measurement: "m"
      state: "{{ state_attr('sensor.zwift_online_1747373', 'totalDistanceClimbed') | float(0) }}"
    - name: Zwift Total Duration
      unique_id: 8ac7c658-a3d0-4ad1-9b02-bc2fdbcdc08d
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ state_attr('sensor.zwift_online_1747373', 'totalTimeInMinutes') | float(0) }}"
    - name: Zwift Total Energy
      unique_id: aa72cc1b-af92-4e52-aca4-fb1c8bdcff54
      device_class: energy
      unit_of_measurement: "Wh"
      state: "{{ state_attr('sensor.zwift_online_1747373', 'totalWattHours') | float(0) }}"

# Quick online/offline status for Deco APs
- sensor:
    - name: Roof AP
      unique_id: b6de94e8-cba9-4a06-ae0d-4e2c0197417e
      state: >-
        {% set deco = state_attr("device_tracker.roof_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}
    - name: Gym AP
      unique_id: a2fadd1d-9ee4-4a36-880a-cd8b5115ec80
      state: >-
        {% set deco = state_attr("device_tracker.gym_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}
    - name: Hallway AP
      unique_id: e1a1d9fc-958d-4d84-b9d0-8f2b0ab5ef35
      state: >-
        {% set deco = state_attr("device_tracker.hallway_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}
    - name: Study AP
      unique_id: 34f82a27-0db8-43d9-9917-25048b9198dd
      state: >-
        {% set deco = state_attr("device_tracker.study_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}
    - name: Living Room AP
      unique_id: eb8f39cd-3871-4250-b2c8-9ac910e1c431
      state: >-
        {% set deco = state_attr("device_tracker.living_room_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}
    - name: Playroom AP
      unique_id: 0f795220-650e-4594-90b4-d472a473954d
      state: >-
        {% set deco = state_attr("device_tracker.playroom_deco", "internet_online") | default(false) %}
        {{ "Online" if deco else "Offline" }}

# Outside Brightness estimator (protect against divide-by-zero)
- sensor:
    - name: Outside Brightness
      unique_id: a482977f-5b03-46ee-b044-6b9dbd9356c4
      unit_of_measurement: "lm/W"
      state: >-
        {% set illuminance = states("sensor.light_sensor_illuminance") | float(0) %}
        {% set irradiance = max(states("sensor.solar_irradiance") | float(0), 1) %}
        {{ illuminance / irradiance }}

# Gas usage “meters” from on-time
- sensor:
    - name: Furnace Gas Meter
      unique_id: 74d06442-77b6-45e2-ac72-704302dc3bb0
      device_class: gas
      unit_of_measurement: "ft³"
      state_class: total_increasing
      state: "{{ 135_000/1030 * (states('sensor.furnace_on_time') | float(0)) }}"
    - name: Dryer Gas Meter
      unique_id: 96d9023a-fbdf-4d5a-a9c7-2070541b50a7
      device_class: gas
      unit_of_measurement: "ft³"
      state_class: total_increasing
      state: "{{ 20_000/1030 * (states('sensor.dryer_on_time') | float(0)) }}"
    - name: Water Heater Gas Meter
      unique_id: 1ce243d6-6c82-4da1-a890-e74c99a3543d
      device_class: gas
      unit_of_measurement: "ft³"
      state_class: total_increasing
      state: "{{ 30_000/1030 * (states('sensor.water_heater_on_time') | float(0)) }}"
    - name: Gas Stove Gas Meter
      unique_id: 963f1388-0ad8-43b2-87eb-9093b9c50a12
      device_class: gas
      unit_of_measurement: "ft³"
      state_class: total_increasing
      state: "{{ 25_000/1030 * (states('sensor.gas_stove_on_time') | float(0)) }}"
    - name: Shop Furnace Gas Meter
      unique_id: c92b0c65-86dc-47ff-8fa6-a2e85c440472
      device_class: gas
      unit_of_measurement: "ft³"
      state_class: total_increasing
      state: "{{ 45_000/1030 * (states('sensor.shop_furnace_on_time') | float(0)) }}"

# Utility bill estimators
- sensor:
    - name: Gas Cost
      device_class: monetary
      state_class: total
      unit_of_measurement: "USD"
      unique_id: e0b00d3a-3b42-465c-ae4e-cbf3616282c3
      state: >-
        {% set x = (states("sensor.gas_meter_relay") | float(0)) / 97.25 %}
        {{ 22.06 + 1.0106*x if x <= 50 else 46.58 + 0.48886*x }}
      attributes:
        last_reset: "{{ state_attr('sensor.gas_meter_relay', 'last_reset') }}"
    - name: Electric Cost
      device_class: monetary
      state_class: total
      unit_of_measurement: "USD"
      unique_id: 67eca815-749f-48fc-8340-1cea9d8d0fb8
      state: >-
        {% set x = states("sensor.electric_meter_relay") | float(0) %}
        {{ 17.87 + 0.16008*x }}
      attributes:
        last_reset: "{{ state_attr('sensor.electric_meter_relay', 'last_reset') }}"
    - name: Water Cost
      device_class: monetary
      state_class: total
      unit_of_measurement: "USD"
      unique_id: 648cf2dd-8bcc-4053-8e67-e3cf8d1e68d4
      state: >-
        {% set x = states("sensor.water_meter_relay") | float(0) %}
        {% if x < 10_000 %}
          {{ 76.00 }}
        {% elif x < 56_600 %}
          {{ 76.00 + 0.0038*x }}
        {% elif x < 66_600 %}
          {{ 291.08 + 0.00345*x }}
        {% else %}
          {{ 520.85 + 0.00259*x }}
        {% endif %}
      attributes:
        last_reset: "{{ state_attr('sensor.water_meter_relay', 'last_reset') }}"

# Binary “heating state” sensors
- binary_sensor:
    - name: Furnace Heating State
      unique_id: 17153591-c1d1-4add-a5ca-912d07c0e565
      state: "{{ is_state_attr('climate.downstairs_thermostat', 'hvac_action', 'heating') }}"
    - name: Dryer Heating State
      unique_id: b8a31303-7c0f-4a7a-b2e0-61b08a952554
      state: "{{ states('sensor.dryer_power') | float(0) > 10 }}"
    - name: Water Heater Heating State
      unique_id: b7542d0c-494d-45f9-8c39-0800563c0882
      state: "{{ states('sensor.water_heater_outlet_power') | float(0) > 10 }}"
    - name: Gas Stove Heating State
      unique_id: ceb9eb23-7a53-4457-ac14-2a4e03b4641c
      state: "{{ is_state('switch.gas_stove_switch','on') }}"
    - name: Shop Furnace Heating State
      unique_id: 77f0102b-5adc-4e39-b3fa-89631cab7132
      state: "{{ states('sensor.shop_furnace_switch_0_power') | float(0) > 10 }}"

# Template select for platform battery state
- select:
    - name: Platform Battery State
      unique_id: 1858d33c-76d8-4168-a220-fe9234e88cc0
      availability: >-
        {{ has_value("sensor.platform_battery_monitor_voltmeter") }}
      state: >-
        {% set v = states("sensor.platform_battery_monitor_voltmeter") | float(0) %}
        {% if v > 13 %}
          charging
        {% elif v < 12 %}
          needs charging
        {% else %}
          discharging
        {% endif %}
      options: "{{ ['unavailable', 'unknown', 'charging', 'needs charging', 'discharging'] }}"
      select_option: []

- sensor:
    # ---------- Home lat/lon (always available once zone.home finishes loading) ----------
    - name: Home Latitude
      unique_id: helper_home_lat
      icon: mdi:home-map-marker
      state: "{{ state_attr('zone.home','latitude') | float(0) }}"
      availability: "{{ state_attr('zone.home','latitude') is not none }}"
    - name: Home Longitude
      unique_id: helper_home_lon
      icon: mdi:home-map-marker
      state: "{{ state_attr('zone.home','longitude') | float(0) }}"
      availability: "{{ state_attr('zone.home','longitude') is not none }}"

    # ---------- Aaron (person) lat/lon (may be unknown at boot; keep safe) ----------
    - name: Aaron Latitude
      unique_id: helper_aaron_lat
      icon: mdi:account
      state: >
        {{ state_attr("person.aaron_watson","latitude")
            | default(none) | float(0) }}
      availability: "{{ state_attr('person.aaron_watson','latitude') is not none }}"
    - name: Aaron Longitude
      unique_id: helper_aaron_lon
      icon: mdi:account
      state: >
        {{ state_attr("person.aaron_watson","longitude")
            | default(none) | float(0) }}
      availability: "{{ state_attr('person.aaron_watson','longitude') is not none }}"

    # ---------- RV lat/lon (from your RV device_tracker attributes) ----------
    - name: RV Latitude
      unique_id: helper_rv_lat
      icon: mdi:van-passenger
      state: >-
        {{ state_attr("device_tracker.rv_device_tracker","latitude")
            | default(none) | float(0) }}
      availability: >-
        {{ state_attr("device_tracker.rv_device_tracker","latitude") is not none }}
    - name: RV Longitude
      unique_id: helper_rv_lon
      icon: mdi:van-passenger
      state: >-
        {{ state_attr("device_tracker.rv_device_tracker","longitude")
            | default(none) | float(0) }}
      availability: >-
        {{ state_attr("device_tracker.rv_device_tracker","longitude") is not none }}

- sensor:
    - name: Chicken Coop Light Brightness
      unit_of_measurement: "%"
      state_class: measurement
      availability: >-
        {{ has_value("light.chicken_coop_light") }}
      state: >-
        {{ state_attr("light.chicken_coop_light", "brightness") | float(0) * 100 / 255 }}

- sensor:
    - name: Dining Room Brightness
      unit_of_measurement: "%"
      state_class: measurement
      availability: >-
        {{ has_value("light.dining_room_light") }}
      state: >-
        {{ state_attr('light.dining_room_light', 'brightness') | float(0) * 100 / 255 }}

- sensor:
    - name: Mains Current
      device_class: current
      unit_of_measurement: A
      state_class: measurement
      availability: >-
        {{ has_value("sensor.none_123_1min") }}
      state: >-
        {{ states("sensor.none_123_1min") | float(0) / 240 }}

- binary_sensor:
    - name: Updates Available
      state: >-
        {{ expand(states) | selectattr("domain", "eq", "update") | selectattr("state", "eq", "on") | map(attribute="entity_id") | list | length > 0 }}

- trigger:
    - platform: state
      entity_id: binary_sensor.rain_sensor_moisture
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: Rain Probe Fresh
      unique_id: rain_probe_fresh
      icon: mdi:timer-sand
      availability: "{{ has_value('binary_sensor.rain_sensor_moisture') }}"
      state: "{{ trigger.platform == 'state' }}"
      delay_off: "00:30:00"

- trigger:
    - platform: state
      entity_id:
        - binary_sensor.rain_sensor_moisture
        - binary_sensor.rain_probe_fresh
        - binary_sensor.sunny
        - weather.openmeteo_weather_home
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: Rainy
      device_class: moisture
      icon: >-
        {{ 'mdi:weather-pouring' if is_state(this.entity_id, 'on')
            else 'mdi:weather-partly-cloudy' }}
      availability: >-
        {{ has_value('binary_sensor.rain_sensor_moisture')
            or has_value('binary_sensor.sunny')
            or has_value('weather.openmeteo_weather_home') }}
      state: >-
        {% set probe_ok = has_value('binary_sensor.rain_sensor_moisture')
                            and is_state('binary_sensor.rain_probe_fresh','on') %}
        {% if probe_ok %}
          {{ is_state('binary_sensor.rain_sensor_moisture','on') }}
        {% else %}
          {% set wx = states('weather.openmeteo_weather_home') %}
          {% set rainy_states = ['rainy','pouring','lightning-rainy'] %}
          {{ (not is_state('binary_sensor.sunny','on')) and (wx in rainy_states) }}
        {% endif %}
      delay_on: "00:00:30"
      delay_off: "00:05:00"
      attributes:
        source_used: >-
          {% set probe_ok = has_value('binary_sensor.rain_sensor_moisture')
                              and is_state('binary_sensor.rain_probe_fresh','on') %}
          {{ 'moisture_sensor' if probe_ok else 'fallback_weather_sunny' }}
        probe_last_changed: >-
          {% if states.binary_sensor.rain_sensor_moisture is defined %}
            {{ states.binary_sensor.rain_sensor_moisture.last_changed }}
          {% else %}none{% endif %}
        weather_state: "{{ states('weather.forecast_home') }}"

- select:
    - name: Mold Status
      state: >-
        {% set s = states("sensor.mold_indicator") | float(0) %}
        {{ "OK" if s < 70 else "High" if s < 100 else "Wet" }}
      availability: "{{ has_value('sensor.mold_indicator') }}"
      options: "{{ ['OK', 'High', 'Wet'] }}"
      select_option:

- select:
    - name: Upstairs HVAC Action
      state: >-
        {{ state_attr('climate.upstairs_thermostat', 'hvac_action') }}
      availability: "{{ has_value('climate.upstairs_thermostat') }}"
      options: "{{ ['cooling', 'drying', 'fan_only', 'idle', 'off'] }}"
      select_option:

- sensor:
    - name: Platform Battery Level
      device_class: battery
      unit_of_measurement: "%"
      availability: >-
        {{ has_value('sensor.platform_battery_monitor_voltmeter') }}
      state: >-
        {% set x = states('sensor.platform_battery_monitor_voltmeter')|float %}
        {{ 22.6757 * x**2 - 476.19 * x + 2500 }}
