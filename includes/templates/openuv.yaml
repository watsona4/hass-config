# ===================== OpenUV: Nearby (triggered templates) =====================
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_nearby
        - sensor.openuv_nearby_protection
        - sensor.openuv_nearby_forecast
  variables:
    src: sensor.openuv_nearby
    prot: sensor.openuv_nearby_protection
  sensor:
    - name: OpenUV Nearby UV Index
      unique_id: openuv_nearby_uv_index
      state_class: measurement
      availability: "{{ has_value(src) }}"
      state: "{{ states(src) | float(0) }}"

    - name: OpenUV Nearby UV Max Index
      unique_id: openuv_nearby_uv_max_index
      state_class: measurement
      availability: "{{ state_attr(src,'uv_max') is not none }}"
      state: "{{ state_attr(src, 'uv_max') | float(0) }}"

    - name: OpenUV Nearby UV Max Time
      unique_id: openuv_nearby_uv_max_time
      device_class: timestamp
      availability: "{{ state_attr(src,'uv_max_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(src,'uv_max_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}

    - name: OpenUV Nearby Ozone
      unique_id: openuv_nearby_ozone
      unit_of_measurement: "DU"
      icon: >-
        {% if state_attr(src,'ozone') | float(0) > 1 %} mdi:weather-fog
        {% else %} mdi:weather-cloudy
        {% endif %}
      availability: "{{ state_attr(src,'ozone') is not none }}"
      state: "{{ state_attr(src, 'ozone') | float(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 1)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_1
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st1') | int(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 2)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_2
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st2') | int(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 3)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_3
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st3') | int(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 4)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_4
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st4') | int(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 5)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_5
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st5') | int(0) }}"

    - name: OpenUV Nearby Safe Exposure Time (Skin Type 6)
      unique_id: openuv_nearby_safe_exposure_time_skin_type_6
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st6') | int(0) }}"

    - name: OpenUV Nearby Protection Window Start
      unique_id: openuv_nearby_protection_window_start
      device_class: timestamp
      availability: "{{ state_attr(prot,'from_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}

    - name: OpenUV Nearby Protection Window End
      unique_id: openuv_nearby_protection_window_end
      device_class: timestamp
      availability: "{{ state_attr(prot,'to_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'to_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}

  binary_sensor:
    - name: OpenUV Nearby Protection Active
      unique_id: openuv_nearby_protection_active
      # No availability needed; state renders only on above triggers
      state: >-
        {% set f = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {% set t = state_attr(prot,'to_time')   | as_datetime(default=none) %}
        {% set fl = f | as_local if f else none %}
        {% set tl = t | as_local if t else none %}
        {{ fl is not none and tl is not none and fl <= now() <= tl }}

# ===================== OpenUV: Home (triggered templates) =====================
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_home
        - sensor.openuv_home_protection
        - sensor.openuv_home_forecast
  variables:
    src: sensor.openuv_home
    prot: sensor.openuv_home_protection
  sensor:
    - name: OpenUV Home UV Index
      unique_id: openuv_home_uv_index
      state_class: measurement
      availability: "{{ has_value(src) }}"
      state: "{{ states(src) | float(0) }}"
    - name: OpenUV Home UV Max Index
      unique_id: openuv_home_uv_max_index
      state_class: measurement
      availability: "{{ state_attr(src,'uv_max') is not none }}"
      state: "{{ state_attr(src, 'uv_max') | float(0) }}"
    - name: OpenUV Home UV Max Time
      unique_id: openuv_home_uv_max_time
      device_class: timestamp
      availability: "{{ state_attr(src,'uv_max_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(src,'uv_max_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
    - name: OpenUV Home Ozone
      unique_id: openuv_home_ozone
      unit_of_measurement: "DU"
      icon: >-
        {% if state_attr(src,'ozone') | float(0) > 1 %} mdi:weather-fog
        {% else %} mdi:weather-cloudy
        {% endif %}
      availability: "{{ state_attr(src,'ozone') is not none }}"
      state: "{{ state_attr(src, 'ozone') | float(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 1)
      unique_id: openuv_home_safe_exposure_time_skin_type_1
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st1') | int(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 2)
      unique_id: openuv_home_safe_exposure_time_skin_type_2
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st2') | int(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 3)
      unique_id: openuv_home_safe_exposure_time_skin_type_3
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st3') | int(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 4)
      unique_id: openuv_home_safe_exposure_time_skin_type_4
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st4') | int(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 5)
      unique_id: openuv_home_safe_exposure_time_skin_type_5
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st5') | int(0) }}"
    - name: OpenUV Home Safe Exposure Time (Skin Type 6)
      unique_id: openuv_home_safe_exposure_time_skin_type_6
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st6') | int(0) }}"
    - name: OpenUV Home Protection Window Start
      unique_id: openuv_home_protection_window_start
      device_class: timestamp
      availability: "{{ state_attr(prot,'from_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
    - name: OpenUV Home Protection Window End
      unique_id: openuv_home_protection_window_end
      device_class: timestamp
      availability: "{{ state_attr(prot,'to_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'to_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
  binary_sensor:
    - name: OpenUV Home Protection Active
      unique_id: openuv_home_protection_active
      state: >-
        {% set f = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {% set t = state_attr(prot,'to_time')   | as_datetime(default=none) %}
        {% set fl = f | as_local if f else none %}
        {% set tl = t | as_local if t else none %}
        {{ fl is not none and tl is not none and fl <= now() <= tl }}

# ===================== OpenUV: RV (triggered templates) =====================
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_rv
        - sensor.openuv_rv_protection
        - sensor.openuv_rv_forecast
  variables:
    src: sensor.openuv_rv
    prot: sensor.openuv_rv_protection
  sensor:
    - name: OpenUV RV UV Index
      unique_id: openuv_rv_uv_index
      state_class: measurement
      availability: "{{ has_value(src) }}"
      state: "{{ states(src) | float(0) }}"
    - name: OpenUV RV UV Max Index
      unique_id: openuv_rv_uv_max_index
      state_class: measurement
      availability: "{{ state_attr(src,'uv_max') is not none }}"
      state: "{{ state_attr(src, 'uv_max') | float(0) }}"
    - name: OpenUV RV UV Max Time
      unique_id: openuv_rv_uv_max_time
      device_class: timestamp
      availability: "{{ state_attr(src,'uv_max_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(src,'uv_max_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
    - name: OpenUV RV Ozone
      unique_id: openuv_rv_ozone
      unit_of_measurement: "DU"
      icon: >-
        {% if state_attr(src,'ozone') | float(0) > 1 %} mdi:weather-fog
        {% else %} mdi:weather-cloudy
        {% endif %}
      availability: "{{ state_attr(src,'ozone') is not none }}"
      state: "{{ state_attr(src, 'ozone') | float(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 1)
      unique_id: openuv_rv_safe_exposure_time_skin_type_1
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st1') | int(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 2)
      unique_id: openuv_rv_safe_exposure_time_skin_type_2
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st2') | int(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 3)
      unique_id: openuv_rv_safe_exposure_time_skin_type_3
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st3') | int(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 4)
      unique_id: openuv_rv_safe_exposure_time_skin_type_4
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st4') | int(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 5)
      unique_id: openuv_rv_safe_exposure_time_skin_type_5
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st5') | int(0) }}"
    - name: OpenUV RV Safe Exposure Time (Skin Type 6)
      unique_id: openuv_rv_safe_exposure_time_skin_type_6
      device_class: duration
      unit_of_measurement: "min"
      state: "{{ (state_attr(src, 'safe_exposure_time') or {}).get('st6') | int(0) }}"
    - name: OpenUV RV Protection Window Start
      unique_id: openuv_rv_protection_window_start
      device_class: timestamp
      availability: "{{ state_attr(prot,'from_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
    - name: OpenUV RV Protection Window End
      unique_id: openuv_rv_protection_window_end
      device_class: timestamp
      availability: "{{ state_attr(prot,'to_time') | as_datetime(default=none) is not none }}"
      state: >-
        {% set dt = state_attr(prot,'to_time') | as_datetime(default=none) %}
        {{ (dt | as_local) if dt is not none else none }}
  binary_sensor:
    - name: OpenUV RV Protection Active
      unique_id: openuv_rv_protection_active
      state: >-
        {% set f = state_attr(prot,'from_time') | as_datetime(default=none) %}
        {% set t = state_attr(prot,'to_time')   | as_datetime(default=none) %}
        {% set fl = f | as_local if f else none %}
        {% set tl = t | as_local if t else none %}
        {{ fl is not none and tl is not none and fl <= now() <= tl }}

# ===================== Adjusted UV (Open-Meteo clouds) =====================
# Nearby
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_nearby_forecast
        - sensor.openmeteo_nearby
        - weather.openmeteo_weather_nearby
    - platform: time
      at: "00:00:15"
  variables:
    uv_src: sensor.openuv_nearby_uv_index
    fc_src: sensor.openuv_nearby_forecast
    om_lut: sensor.openmeteo_nearby_cloud_lut
    wx_src: weather.openmeteo_weather_nearby
    raw_fc: "{{ state_attr(fc_src,'result') or [] }}"
    pairs_raw: "{{ state_attr(om_lut,'pairs') or [] }}"
    pairs: "{{ pairs_raw if pairs_raw is sequence else (pairs_raw | from_json) }}"
  sensor:
    - name: Nearby Apparent UV Index
      unique_id: adjusted_nearby_uv_index
      unit_of_measurement: "UV index"
      state_class: measurement
      availability: "{{ has_value(uv_src) }}"
      state: >-
        {% from 'macros.jinja' import uv_factor_sigmoid %}
        {% set raw_uv = states(uv_src) | float(0) %}
        {% set clouds = state_attr(wx_src,'cloud_coverage') | float(0) %}
        {{ (raw_uv * (uv_factor_sigmoid(clouds) | float(1))) | round(2) }}
      attributes:
        raw_uv: "{{ states(uv_src) }}"
        cloud_coverage: "{{ state_attr(wx_src,'cloud_coverage') }}"
        weather: "{{ states(wx_src) }}"
        forecast: >-
          {% from 'macros.jinja' import uv_factor_sigmoid %}
          {%- set out = namespace(items=[]) -%}
          {%- for p in (raw_fc or []) -%}
            {%- set t = (p.get('uv_time') | as_datetime(default=none)) -%}
            {%- if t is not none -%}
              {%- set tl = t | as_local -%}
              {%- set hk = (tl.replace(minute=0,second=0,microsecond=0) | as_timestamp | int) -%}
              {%- set c = (pairs | selectattr('hk','eq', hk) | map(attribute='cc') | first) | default(0, true) | float(0) -%}
              {%- set f = uv_factor_sigmoid(c) | float(1) -%}
              {%- set out.items = out.items + [ {
                    'datetime': tl.isoformat(),
                    'uv_base': (p.get('uv',0) | float(0)),
                    'cloud_cover': c,
                    'factor': f,
                    'uv_apparent': (p.get('uv',0) | float(0)) * f
                  } ] -%}
            {%- endif -%}
          {%- endfor -%}
          {{ out.items }}

# Home
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_home_forecast
        - sensor.openmeteo_home
        - weather.openmeteo_weather_home
    - platform: time
      at: "00:00:15"
  variables:
    uv_src: sensor.openuv_home_uv_index
    fc_src: sensor.openuv_home_forecast
    om_lut: sensor.openmeteo_home_cloud_lut
    wx_src: weather.openmeteo_weather_home
    raw_fc: "{{ state_attr(fc_src,'result') or [] }}"
    pairs_raw: "{{ state_attr(om_lut,'pairs') or [] }}"
    pairs: "{{ pairs_raw if pairs_raw is sequence else (pairs_raw | from_json) }}"
  sensor:
    - name: Home Apparent UV Index
      unique_id: adjusted_home_uv_index
      unit_of_measurement: "UV index"
      state_class: measurement
      availability: "{{ has_value(uv_src) }}"
      state: >-
        {% from 'macros.jinja' import uv_factor_sigmoid %}
        {% set raw_uv = states(uv_src) | float(0) %}
        {% set clouds = state_attr(wx_src,'cloud_coverage') | float(0) %}
        {{ (raw_uv * (uv_factor_sigmoid(clouds) | float(1))) | round(2) }}
      attributes:
        raw_uv: "{{ states(uv_src) }}"
        cloud_coverage: "{{ state_attr(wx_src,'cloud_coverage') }}"
        weather: "{{ states(wx_src) }}"
        forecast: >-
          {% from 'macros.jinja' import uv_factor_sigmoid %}
          {%- set out = namespace(items=[]) -%}
          {%- for p in (raw_fc or []) -%}
            {%- set t = (p.get('uv_time') | as_datetime(default=none)) -%}
            {%- if t is not none -%}
              {%- set tl = t | as_local -%}
              {%- set hk = (tl.replace(minute=0,second=0,microsecond=0) | as_timestamp | int) -%}
              {%- set c = (pairs | selectattr('hk','eq', hk) | map(attribute='cc') | first) | default(0, true) | float(0) -%}
              {%- set f = uv_factor_sigmoid(c) | float(1) -%}
              {%- set out.items = out.items + [ {
                    'datetime': tl.isoformat(),
                    'uv_base': (p.get('uv',0) | float(0)),
                    'cloud_cover': c,
                    'factor': f,
                    'uv_apparent': (p.get('uv',0) | float(0)) * f
                  } ] -%}
            {%- endif -%}
          {%- endfor -%}
          {{ out.items }}

# RV
- trigger:
    - platform: state
      entity_id:
        - sensor.openuv_rv_forecast
        - sensor.openmeteo_rv
        - weather.openmeteo_weather_rv
    - platform: time
      at: "00:00:15"
  variables:
    uv_src: sensor.openuv_rv_uv_index
    fc_src: sensor.openuv_rv_forecast
    om_lut: sensor.openmeteo_rv_cloud_lut
    wx_src: weather.openmeteo_weather_rv
    raw_fc: "{{ state_attr(fc_src,'result') or [] }}"
    pairs_raw: "{{ state_attr(om_lut,'pairs') or [] }}"
    pairs: "{{ pairs_raw if pairs_raw is sequence else (pairs_raw | from_json) }}"
  sensor:
    - name: RV Apparent UV Index
      unique_id: adjusted_rv_uv_index
      unit_of_measurement: "UV index"
      state_class: measurement
      availability: "{{ has_value(uv_src) }}"
      state: >-
        {% from 'macros.jinja' import uv_factor_sigmoid %}
        {% set raw_uv = states(uv_src) | float(0) %}
        {% set clouds = state_attr(wx_src,'cloud_coverage') | float(0) %}
        {{ (raw_uv * (uv_factor_sigmoid(clouds) | float(1))) | round(2) }}
      attributes:
        raw_uv: "{{ states(uv_src) }}"
        cloud_coverage: "{{ state_attr(wx_src,'cloud_coverage') }}"
        weather: "{{ states(wx_src) }}"
        forecast: >-
          {% from 'macros.jinja' import uv_factor_sigmoid %}
          {%- set out = namespace(items=[]) -%}
          {%- for p in (raw_fc or []) -%}
            {%- set t = (p.get('uv_time') | as_datetime(default=none)) -%}
            {%- if t is not none -%}
              {%- set tl = t | as_local -%}
              {%- set hk = (tl.replace(minute=0,second=0,microsecond=0) | as_timestamp | int) -%}
              {%- set c = (pairs | selectattr('hk','eq', hk) | map(attribute='cc') | first) | default(0, true) | float(0) -%}
              {%- set f = uv_factor_sigmoid(c) | float(1) -%}
              {%- set out.items = out.items + [ {
                    'datetime': tl.isoformat(),
                    'uv_base': (p.get('uv',0) | float(0)),
                    'cloud_cover': c,
                    'factor': f,
                    'uv_apparent': (p.get('uv',0) | float(0)) * f
                  } ] -%}
            {%- endif -%}
          {%- endfor -%}
          {{ out.items }}

# ===================== Protection window from adjusted UV =====================
# Nearby (add midnight tick so "today" boundaries recompute without now()-polling)
- trigger:
    - platform: state
      entity_id: sensor.adjusted_nearby_uv_index
    - platform: time
      at: "00:00:10"
  variables:
    thr: 3.5
    raw: "{{ state_attr('sensor.adjusted_nearby_uv_index','forecast') }}"
    data: >-
      {%- if raw is string -%}{{ raw | from_json }}
      {%- elif raw is sequence -%}{{ raw }}
      {%- else -%}{{ [] }}
      {%- endif %}
  sensor:
    - name: Nearby UV Protection Start
      unique_id: nearby_uv_protection_start
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, first_t=None, first_v=None, start_ts=None) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if ns.first_t is none %}{% set ns.first_t = tl %}{% set ns.first_v = v %}{% endif %}
            {% if ns.prev_t is not none and ns.start_ts is none and ns.prev_v < thr and v >= thr %}
              {% set dv = v - ns.prev_v %}
              {% set frac = (thr - ns.prev_v) / (dv if dv != 0 else 1) %}
              {% set ns.start_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.start_ts is none and ns.first_t is not none and ns.first_v >= thr %}
          {% set ns.start_ts = ns.first_t.timestamp() %}
        {% endif %}
        {{ (ns.start_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.start_ts is not none else none }}

    - name: Nearby UV Protection End
      unique_id: nearby_uv_protection_end
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, end_ts=None, last_t=None, last_v=None, ever_above=false) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if v >= thr %}{% set ns.ever_above = true %}{% endif %}
            {% if ns.prev_t is not none and ns.prev_v >= thr and v < thr %}
              {% set dv = ns.prev_v - v %}
              {% set frac = (ns.prev_v - thr) / (dv if dv != 0 else 1) %}
              {% set ns.end_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
            {% set ns.last_t = tl %}
            {% set ns.last_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.end_ts is none and ns.last_t is not none and ns.ever_above %}
          {% set ns.end_ts = ns.last_t.timestamp() %}
        {% endif %}
        {{ (ns.end_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.end_ts is not none else none }}

    - name: Nearby UV Protection Duration
      unique_id: nearby_uv_protection_duration
      unit_of_measurement: "min"
      icon: mdi:clock-outline
      availability: "{{ has_value('sensor.nearby_uv_protection_start') and has_value('sensor.nearby_uv_protection_end') }}"
      state: >-
        {% set start = states('sensor.nearby_uv_protection_start') | as_datetime(default=None) %}
        {% set end   = states('sensor.nearby_uv_protection_end')   | as_datetime(default=None) %}
        {% if start and end %} {{ ((end.timestamp() - start.timestamp()) / 60) | round(0) }}
        {% else %} 0 {% endif %}

- trigger:
    - platform: state
      entity_id:
        - sensor.nearby_uv_protection_start
        - sensor.nearby_uv_protection_end
    # Optional coarse tick so it flips near edges without minutely now(): adjust/remove as you like
    - platform: time_pattern
      minutes: "/10"
  binary_sensor:
    - name: Nearby UV Protection
      unique_id: nearby_uv_protection
      availability: "{{ has_value('sensor.nearby_uv_protection_start') and has_value('sensor.nearby_uv_protection_end') }}"
      state: >-
        {% set start = states('sensor.nearby_uv_protection_start') | as_datetime(default=None) %}
        {% set end   = states('sensor.nearby_uv_protection_end')   | as_datetime(default=None) %}
        {{ start is not none and end is not none and start <= now() < end }}
      attributes:
        start: "{{ states('sensor.nearby_uv_protection_start') }}"
        end: "{{ states('sensor.nearby_uv_protection_end') }}"
        duration: "{{ states('sensor.nearby_uv_protection_duration') }}"

# Home
- trigger:
    - platform: state
      entity_id: sensor.adjusted_home_uv_index
    - platform: time
      at: "00:00:10"
  variables:
    thr: 3.5
    raw: "{{ state_attr('sensor.adjusted_home_uv_index','forecast') }}"
    data: >-
      {%- if raw is string -%}{{ raw | from_json }}
      {%- elif raw is sequence -%}{{ raw }}
      {%- else -%}{{ [] }}
      {%- endif %}
  sensor:
    - name: Home UV Protection Start
      unique_id: home_uv_protection_start
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, first_t=None, first_v=None, start_ts=None) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if ns.first_t is none %}{% set ns.first_t = tl %}{% set ns.first_v = v %}{% endif %}
            {% if ns.prev_t is not none and ns.start_ts is none and ns.prev_v < thr and v >= thr %}
              {% set dv = v - ns.prev_v %}
              {% set frac = (thr - ns.prev_v) / (dv if dv != 0 else 1) %}
              {% set ns.start_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.start_ts is none and ns.first_t is not none and ns.first_v >= thr %}
          {% set ns.start_ts = ns.first_t.timestamp() %}
        {% endif %}
        {{ (ns.start_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.start_ts is not none else none }}

    - name: Home UV Protection End
      unique_id: home_uv_protection_end
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, end_ts=None, last_t=None, last_v=None, ever_above=false) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if v >= thr %}{% set ns.ever_above = true %}{% endif %}
            {% if ns.prev_t is not none and ns.prev_v >= thr and v < thr %}
              {% set dv = ns.prev_v - v %}
              {% set frac = (ns.prev_v - thr) / (dv if dv != 0 else 1) %}
              {% set ns.end_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
            {% set ns.last_t = tl %}
            {% set ns.last_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.end_ts is none and ns.last_t is not none and ns.ever_above %}
          {% set ns.end_ts = ns.last_t.timestamp() %}
        {% endif %}
        {{ (ns.end_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.end_ts is not none else none }}

    - name: Home UV Protection Duration
      unique_id: home_uv_protection_duration
      unit_of_measurement: "min"
      icon: mdi:clock-outline
      availability: "{{ has_value('sensor.home_uv_protection_start') and has_value('sensor.home_uv_protection_end') }}"
      state: >-
        {% set start = states('sensor.home_uv_protection_start') | as_datetime(default=None) %}
        {% set end   = states('sensor.home_uv_protection_end')   | as_datetime(default=None) %}
        {% if start and end %} {{ ((end.timestamp() - start.timestamp()) / 60) | round(0) }}
        {% else %} 0 {% endif %}

# RV
- trigger:
    - platform: state
      entity_id: sensor.adjusted_rv_uv_index
    - platform: time
      at: "00:00:10"
  variables:
    thr: 3.5
    raw: "{{ state_attr('sensor.adjusted_rv_uv_index','forecast') }}"
    data: >-
      {%- if raw is string -%}{{ raw | from_json }}
      {%- elif raw is sequence -%}{{ raw }}
      {%- else -%}{{ [] }}
      {%- endif %}
  sensor:
    - name: RV UV Protection Start
      unique_id: rv_uv_protection_start
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, first_t=None, first_v=None, start_ts=None) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if ns.first_t is none %}{% set ns.first_t = tl %}{% set ns.first_v = v %}{% endif %}
            {% if ns.prev_t is not none and ns.start_ts is none and ns.prev_v < thr and v >= thr %}
              {% set dv = v - ns.prev_v %}
              {% set frac = (thr - ns.prev_v) / (dv if dv != 0 else 1) %}
              {% set ns.start_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.start_ts is none and ns.first_t is not none and ns.first_v >= thr %}
          {% set ns.start_ts = ns.first_t.timestamp() %}
        {% endif %}
        {{ (ns.start_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.start_ts is not none else none }}

    - name: RV UV Protection End
      unique_id: rv_uv_protection_end
      device_class: timestamp
      state: >-
        {% set ns = namespace(prev_t=None, prev_v=None, end_ts=None, last_t=None, last_v=None, ever_above=false) %}
        {% for p in (data or []) %}
          {% set t = p.datetime | default(p.get('datetime')) | as_datetime(default=none) %}
          {% if t is not none and (t | as_local).date() == now().date() %}
            {% set tl = t | as_local %}
            {% set v = p.uv_apparent | default(p.get('uv_apparent')) | float(0) %}
            {% if v >= thr %}{% set ns.ever_above = true %}{% endif %}
            {% if ns.prev_t is not none and ns.prev_v >= thr and v < thr %}
              {% set dv = ns.prev_v - v %}
              {% set frac = (ns.prev_v - thr) / (dv if dv != 0 else 1) %}
              {% set ns.end_ts = ns.prev_t.timestamp() + frac * (tl.timestamp() - ns.prev_t.timestamp()) %}
            {% endif %}
            {% set ns.prev_t = tl %}
            {% set ns.prev_v = v %}
            {% set ns.last_t = tl %}
            {% set ns.last_v = v %}
          {% endif %}
        {% endfor %}
        {% if ns.end_ts is none and ns.last_t is not none and ns.ever_above %}
          {% set ns.end_ts = ns.last_t.timestamp() %}
        {% endif %}
        {{ (ns.end_ts | timestamp_custom('%Y-%m-%dT%H:%M:%S%z', true)) if ns.end_ts is not none else none }}

    - name: RV UV Protection Duration
      unique_id: rv_uv_protection_duration
      unit_of_measurement: "min"
      icon: mdi:clock-outline
      availability: "{{ has_value('sensor.rv_uv_protection_start') and has_value('sensor.rv_uv_protection_end') }}"
      state: >-
        {% set start = states('sensor.rv_uv_protection_start') | as_datetime(default=None) %}
        {% set end   = states('sensor.rv_uv_protection_end')   | as_datetime(default=None) %}
        {% if start and end %} {{ ((end.timestamp() - start.timestamp()) / 60) | round(0) }}
        {% else %} 0 {% endif %}
