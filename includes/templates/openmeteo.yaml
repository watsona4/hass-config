# ================= OpenMeteo Cloud LUT - Nearby =================
- trigger:
    - platform: state
      entity_id: sensor.openmeteo_nearby
    - platform: time
      at: "00:00:15"
  variables:
    src: sensor.openmeteo_nearby
    h: "{{ state_attr(src, 'hourly') or {} }}"
    tt: "{{ h.get('time') or [] }}"
    cc: "{{ h.get('cloud_cover') or [] }}"
    coverage_start_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[0] | as_datetime(default=None) | as_local) }}
      {% endif %}
    coverage_end_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[-1] | as_datetime(default=None) | as_local) }}
      {% endif %}
    pairs_list: >-
      {%- set out = namespace(items=[]) -%}
      {%- for i in range(tt | length) -%}
        {%- set t = tt[i] | as_datetime(default=None) -%}
        {%- if t is not none -%}
          {%- set tl = as_local(t) -%}
          {%- set hk = (tl.replace(minute=0, second=0, microsecond=0) | as_timestamp | int) -%}
          {%- set val = (cc[i] | float(0)) if i < (cc | length) else 0.0 -%}
          {%- set out.items = out.items + [ {'hk': hk, 'cc': val} ] -%}
        {%- endif -%}
      {%- endfor -%}
      {{ out.items }}
  sensor:
    - name: OpenMeteo Nearby Cloud LUT
      unique_id: openmeteo_nearby_cloud_lut
      device_class: timestamp
      availability: "{{ has_value(src) and (tt | length) > 0 }}"
      state: "{{ coverage_end_ts }}"
      attributes:
        coverage_start: "{{ coverage_start_ts }}"
        coverage_end: "{{ coverage_end_ts }}"
        pairs: "{{ pairs_list | tojson }}"
    - name: OpenMeteo Nearby Wind Speed
      unique_id: openmeteo_nearby_wind_speed
      device_class: wind_speed
      unit_of_measurement: "mph"
      availability: "{{ has_value(src) }}"
      state: "{{ state_attr(src,'current')['wind_speed_10m'] }}"
    - name: OpenMeteo Nearby Wind Gust
      unique_id: openmeteo_nearby_wind_gust
      device_class: wind_speed
      unit_of_measurement: "mph"
      availability: "{{ has_value(src) }}"
      state: "{{ state_attr(src,'current')['wind_gusts_10m'] }}"
    - name: OpenMeteo Nearby Wind Direction
      unique_id: openmeteo_nearby_wind_direction
      device_class: wind_direction
      unit_of_measurement: "Â°"
      availability: "{{ has_value(src) }}"
      state: "{{ state_attr(src,'current')['wind_direction_10m'] }}"
    - name: OpenMeteo Nearby Precipitation
      unique_id: openmeteo_nearby_precipitation
      device_class: precipitation
      unit_of_measurement: "in"
      availability: "{{ has_value(src) }}"
      state: "{{ state_attr(src,'daily')['precipitation_sum'][0] }}"
    - name: OpenMeteo Nearby Precip Probability
      unique_id: openmeteo_nearby_precip_probability
      unit_of_measurement: "%"
      availability: "{{ has_value(src) }}"
      state: "{{ state_attr(src,'daily')['precipitation_probability_max'][0] }}"

# ================= OpenMeteo Cloud LUT - Home =================
- trigger:
    - platform: state
      entity_id: sensor.openmeteo_home
    - platform: time
      at: "00:00:15"
  variables:
    src: sensor.openmeteo_home
    h: "{{ state_attr(src, 'hourly') or {} }}"
    tt: "{{ h.get('time') or [] }}"
    cc: "{{ h.get('cloud_cover') or [] }}"
    coverage_start_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[0] | as_datetime(default=None) | as_local) }}
      {% endif %}
    coverage_end_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[-1] | as_datetime(default=None) | as_local) }}
      {% endif %}
    pairs_list: >-
      {%- set out = namespace(items=[]) -%}
      {%- for i in range(tt | length) -%}
        {%- set t = tt[i] | as_datetime(default=None) -%}
        {%- if t is not none -%}
          {%- set tl = as_local(t) -%}
          {%- set hk = (tl.replace(minute=0, second=0, microsecond=0) | as_timestamp | int) -%}
          {%- set val = (cc[i] | float(0)) if i < (cc | length) else 0.0 -%}
          {%- set out.items = out.items + [ {'hk': hk, 'cc': val} ] -%}
        {%- endif -%}
      {%- endfor -%}
      {{ out.items }}
  sensor:
    - name: OpenMeteo Home Cloud LUT
      unique_id: openmeteo_home_cloud_lut
      device_class: timestamp
      availability: "{{ has_value(src) and (tt | length) > 0 }}"
      state: "{{ coverage_end_ts }}"
      attributes:
        coverage_start: "{{ coverage_start_ts }}"
        coverage_end: "{{ coverage_end_ts }}"
        pairs: "{{ pairs_list | tojson }}"

# ================= OpenMeteo Cloud LUT - RV =================
- trigger:
    - platform: state
      entity_id: sensor.openmeteo_rv
    - platform: time
      at: "00:00:15"
  variables:
    src: sensor.openmeteo_rv
    h: "{{ state_attr(src, 'hourly') or {} }}"
    tt: "{{ h.get('time') or [] }}"
    cc: "{{ h.get('cloud_cover') or [] }}"
    coverage_start_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[0] | as_datetime(default=None) | as_local) }}
      {% endif %}
    coverage_end_ts: >-
      {% if tt | length > 0 %}
        {{ (tt[-1] | as_datetime(default=None) | as_local) }}
      {% endif %}
    pairs_list: >-
      {%- set out = namespace(items=[]) -%}
      {%- for i in range(tt | length) -%}
        {%- set t = tt[i] | as_datetime(default=None) -%}
        {%- if t is not none -%}
          {%- set tl = as_local(t) -%}
          {%- set hk = (tl.replace(minute=0, second=0, microsecond=0) | as_timestamp | int) -%}
          {%- set val = (cc[i] | float(0)) if i < (cc | length) else 0.0 -%}
          {%- set out.items = out.items + [ {'hk': hk, 'cc': val} ] -%}
        {%- endif -%}
      {%- endfor -%}
      {{ out.items }}
  sensor:
    - name: OpenMeteo RV Cloud LUT
      unique_id: openmeteo_rv_cloud_lut
      device_class: timestamp
      availability: "{{ has_value(src) and (tt | length) > 0 }}"
      state: "{{ coverage_end_ts }}"
      attributes:
        coverage_start: "{{ coverage_start_ts }}"
        coverage_end: "{{ coverage_end_ts }}"
        pairs: "{{ pairs_list | tojson }}"
