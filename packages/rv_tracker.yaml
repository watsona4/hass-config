###############################################################################
# Package: RV Tracker via MQTT StateStream → device_tracker.see
# File: packages/rv_tracker.yaml
#
# Assumes you have `homeassistant: packages: !include_dir_named packages`
# in configuration.yaml.
#
# StateStream topics used (publish from RV side):
#   site/rv/statestream/device_tracker/gps_location/latitude
#   site/rv/statestream/device_tracker/gps_location/longitude
#   site/rv/statestream/device_tracker/gps_location/altitude
#   site/rv/statestream/device_tracker/gps_location/gps_accuracy
#
# Creates/updates device_tracker.rv_device_tracker without extra MQTT sensors.
###############################################################################

input_number:
  rv_lat:
    name: RV Lat
    min: -90
    max: 90
    step: 0.000001
  rv_lon:
    name: RV Lon
    min: -180
    max: 180
    step: 0.000001
  rv_alt:
    name: RV Alt
    min: -1000
    max: 10000
    step: 0.1
  rv_acc:
    name: RV GPS Acc
    min: 0
    max: 10000
    step: 0.1

input_datetime:
  rv_last_seen:
    name: RV Last Seen
    has_date: true
    has_time: true

automation:

  #############################################################################
  # 1) Collector: write each StateStream field into helpers (and timestamp)
  #############################################################################
  - id: rv_statestream_collect
    alias: "RV tracker: collect StateStream fields → helpers"
    mode: parallel
    trigger:
      - platform: mqtt
        topic: site/rv/statestream/device_tracker/gps_location/latitude
      - platform: mqtt
        topic: site/rv/statestream/device_tracker/gps_location/longitude
      - platform: mqtt
        topic: site/rv/statestream/device_tracker/gps_location/altitude
      - platform: mqtt
        topic: site/rv/statestream/device_tracker/gps_location/gps_accuracy
    variables:
      t: "{{ trigger.topic }}"
      val: "{{ trigger.payload }}"
    action:
      - choose:
          - conditions: "{{ t.endswith('/latitude') }}"
            sequence:
              - service: input_number.set_value
                target: { entity_id: input_number.rv_lat }
                data:
                  value: "{{ val | float(default=state_attr('input_number.rv_lat','value')) }}"
          - conditions: "{{ t.endswith('/longitude') }}"
            sequence:
              - service: input_number.set_value
                target: { entity_id: input_number.rv_lon }
                data:
                  value: "{{ val | float(default=state_attr('input_number.rv_lon','value')) }}"
          - conditions: "{{ t.endswith('/altitude') }}"
            sequence:
              - service: input_number.set_value
                target: { entity_id: input_number.rv_alt }
                data:
                  value: "{{ val | float(default=state_attr('input_number.rv_alt','value')) }}"
          - conditions: "{{ t.endswith('/gps_accuracy') }}"
            sequence:
              - service: input_number.set_value
                target: { entity_id: input_number.rv_acc }
                data:
                  value: "{{ val | float(default=state_attr('input_number.rv_acc','value')) }}"
      - service: input_datetime.set_datetime
        target: { entity_id: input_datetime.rv_last_seen }
        data:
          datetime: "{{ (now() | as_local).isoformat() }}"

  #############################################################################
  # 2) Coalescer: after 1s debounce, push ONE update to device_tracker.see
  #############################################################################
  - id: rv_tracker_update
    alias: "RV tracker: coalesce → device_tracker.see"
    mode: restart
    trigger:
      - platform: state
        entity_id:
          - input_number.rv_lat
          - input_number.rv_lon
          - input_number.rv_alt
          - input_number.rv_acc
      - platform: state
        entity_id: input_datetime.rv_last_seen
    action:
      # Let the 4 topics land; last trigger restarts this so we run once
      - delay: "00:00:01"

      - variables:
          lat: "{{ states('input_number.rv_lat') | float(default=none) }}"
          lon: "{{ states('input_number.rv_lon') | float(default=none) }}"
          alt: "{{ states('input_number.rv_alt') | float(0) }}"
          acc: "{{ states('input_number.rv_acc') | float(0) }}"
          last_seen_str: "{{ states('input_datetime.rv_last_seen') }}"
          last_seen_dt: "{{ last_seen_str | as_datetime(default=none) }}"

          home_lat: "{{ state_attr('zone.home','latitude')  | float(0) }}"
          home_lon: "{{ state_attr('zone.home','longitude') | float(0) }}"
          d_km: >-
            {% if lat is not none and lon is not none %}
              {{ distance(lat, lon, home_lat, home_lon) }}
            {% else %} {{ none }} {% endif %}
          inside_home: "{{ d_km is not none and (d_km | float(9999)) <= 0.1 }}"

          attrs: >-
            {{ {
              'latitude': lat,
              'longitude': lon,
              'altitude': alt,
              'gps_accuracy': acc,
              'last_seen': (last_seen_dt | as_datetime | as_local).isoformat() if last_seen_dt else none,
              'source': 'mqtt-statestream'
            } }}

      - choose:
          - conditions: "{{ lat is not none and lon is not none }}"
            sequence:
              - choose:
                  - conditions: "{{ inside_home }}"
                    sequence:
                      - service: device_tracker.see
                        data:
                          dev_id: rv_device_tracker
                          location_name: home
                          attributes: "{{ attrs }}"
                default:
                  - service: device_tracker.see
                    data:
                      dev_id: rv_device_tracker
                      source_type: gps
                      gps:
                        - "{{ lat }}"
                        - "{{ lon }}"
                      gps_accuracy: "{{ acc | int(0) }}"
                      attributes: "{{ attrs }}"
        default:
          # Only non-position fields changed; just refresh attributes & timestamp
          - service: device_tracker.see
            data:
              dev_id: rv_device_tracker
              attributes: "{{ attrs }}"

  #############################################################################
  # 3) Stale watchdog → not_home if >5 min since last_seen
  #############################################################################
  - id: rv_tracker_stale_watchdog
    alias: "RV tracker: stale watchdog → not_home"
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/2"
    variables:
      last_seen_str: "{{ state_attr('device_tracker.rv_device_tracker','last_seen') }}"
      last_seen_dt: "{{ (last_seen_str | as_datetime(default=none)) | as_local if last_seen_str is string else none }}"
      stale: "{{ last_seen_dt is none or (now() - last_seen_dt | as_datetime | as_local).total_seconds() >= 300 }}"
    condition: "{{ stale }}"
    action:
      - service: device_tracker.see
        data:
          dev_id: rv_device_tracker
          location_name: not_home
          attributes:
            last_seen: "{{ last_seen_str }}"
            source: stale_watchdog
            stale: true
