open_all_windows:
  alias: All Windows Open
  sequence:
  - target:
      entity_id:
      - input_boolean.all_windows
    data: {}
    action: input_boolean.turn_on
  - parallel:
    - data:
        switches:
        - binary_sensor.living_room_closed_brightness
        - binary_sensor.living_room_closed_tv
        - binary_sensor.west_windows_closed_temperature
        - binary_sensor.living_room_closed_button
        action: Open
        entities:
        - cover.living_room_right_window
        - cover.living_room_left_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.breakfast_room_closed_brightness
        - binary_sensor.west_windows_closed_temperature
        - binary_sensor.breakfast_room_closed_button
        action: Open
        entities:
        - cover.breakfast_room_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.west_windows_closed_temperature
        action: Open
        entities:
        - cover.laundry_room_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.kitchen_closed_brightness
        - binary_sensor.kitchen_closed_hub
        action: Open
        entities:
        - cover.kitchen_right_window
      action: script.window_position
    - data:
        action: Open
        entities:
        - cover.kitchen_left_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.front_hallway_closed_temperature
        action: Open
        entities:
        - cover.front_hallway_window
      action: script.window_position
    - if:
      - condition: state
        entity_id: input_boolean.study_occupied
        state: 'off'
      then:
      - parallel:
        - data:
            switches:
            - binary_sensor.study_south_closed_temperature
            - binary_sensor.study_south_closed_brightness
            action: Open
            entities:
            - cover.study_left_window
            - cover.study_right_window
          action: script.window_position
        - data:
            switches:
            - binary_sensor.study_west_closed_temperature
            - binary_sensor.study_west_closed_brightness
            action: Open
            entities:
            - cover.study_west_window
          action: script.window_position
    - data:
        switches:
        - binary_sensor.guest_bedroom_presence_presence_sensor_1
        - binary_sensor.guest_south_closed_temperature
        - binary_sensor.guest_bedroom_closed_button
        action: Open
        entities:
        - cover.guest_bedroom_south_window
      action: script.window_position
    - data:
        action: Open
        switches:
        - binary_sensor.master_bedroom_closed_button
        - binary_sensor.master_bedroom_closed_morning
        entities:
        - cover.master_bedroom_left_window
        - cover.master_bedroom_right_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.guest_bedroom_presence_presence_sensor_1
        - binary_sensor.west_windows_closed_temperature
        - binary_sensor.guest_bedroom_closed_button
        action: Open
        entities:
        - cover.guest_bedroom_left_window
        - cover.guest_bedroom_right_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.master_bathroom_closed_presence
        - binary_sensor.master_bathroom_closed_button
        action: Open
        entities:
        - cover.master_bathroom_left_window
        - cover.master_bathroom_right_window
      action: script.window_position
    - data:
        switches:
        - binary_sensor.kids_bathroom_closed_button
        - binary_sensor.kids_bathroom_closed_presence
        action: Open
        entities:
        - cover.kids_bathroom_window
      action: script.window_position
  mode: restart
  icon: mdi:blinds-open
close_all_windows:
  alias: All Windows Closed
  sequence:
  - target:
      entity_id:
      - input_boolean.all_windows
    data: {}
    action: input_boolean.turn_off
  - parallel:
    - data:
        action: Closed Down
        entities:
        - cover.living_room_right_window
        - cover.living_room_left_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.breakfast_room_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.laundry_room_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.kitchen_left_window
        - cover.kitchen_right_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.front_hallway_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.guest_bedroom_left_window
        - cover.guest_bedroom_right_window
        - cover.guest_bedroom_south_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.kids_bathroom_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.master_bathroom_left_window
        - cover.master_bathroom_right_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.master_bedroom_left_window
        - cover.master_bedroom_right_window
        reason: Nighttime
      action: script.window_position
    - if:
      - condition: state
        entity_id: input_boolean.study_occupied
        state: 'off'
      then:
      - data:
          action: Closed Down
          entities:
          - cover.study_left_window
          - cover.study_right_window
          - cover.study_west_window
          reason: Nighttime
        action: script.window_position
  mode: restart
  icon: mdi:blinds-horizontal-closed
turn_on_lights:
  alias: Turn On Exterior Lights
  sequence:
  - parallel:
    - sequence:
      - wait_template: '{{ has_value(''switch.back_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.back_porch_switch_0
            data: {}
            action: switch.turn_on
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and not states(''switch.back_porch_switch_0'')|bool
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.front_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.front_porch_switch_0
            data: {}
            action: switch.turn_on
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and not states(''switch.front_porch_switch_0'')|bool
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.kitchen_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.kitchen_porch_switch_0
            data: {}
            action: switch.turn_on
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and not states(''switch.kitchen_porch_switch_0'')|bool
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.garage_lights_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.garage_lights_switch_0
            data: {}
            action: switch.turn_on
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and not states(''switch.garage_lights_switch_0'')|bool
              }}'
  mode: single
  icon: mdi:lightbulb-on-outline
turn_off_lights:
  alias: Turn Off Exterior Lights
  sequence:
  - parallel:
    - sequence:
      - wait_template: '{{ has_value(''switch.back_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.back_porch_switch_0
            data: {}
            action: switch.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''switch.back_porch_switch_0'',''on'')
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.front_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.front_porch_switch_0
            data: {}
            action: switch.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''switch.front_porch_switch_0'',''on'')
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.garage_lights_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.garage_lights_switch_0
            data: {}
            action: switch.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''switch.garage_lights_switch_0'',''on'')
              }}'
    - sequence:
      - wait_template: '{{ has_value(''switch.kitchen_porch_switch_0'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.kitchen_porch_switch_0
            data: {}
            action: switch.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''switch.kitchen_porch_switch_0'',''on'')
              }}'
  mode: restart
  icon: mdi:lightbulb-off-outline
living_room_lights:
  alias: Living Room Lights
  description: ''
  sequence:
  - variables:
      target: '{% set weekday = now().strftime("%w")|int  %} {% set hour = now().strftime("%H")|int  %}
        {% set minute = now().strftime("%M")|int  %} {% set input = states(''input_number.living_room_brightness'')|float(0)
        %} {{ 1000 if weekday == 4 and hour == 16 and minute <= 30 else input }}'
      illuminance_target: '{{ target/2 if is_state(''binary_sensor.living_room_closed_tv'',''on'')
        else target }}'
      max_illuminance: '{{ target }}'
      max_brightness: 50
      illuminance_margin: '{{ 0.05*illuminance_target }}'
      brightness_margin: '{{ (illuminance_margin*max_brightness/max_illuminance) }}'
      cur_illuminance: '{{ states(''sensor.living_room_illuminance_state'')|float(0)
        }}'
      cur_brightness: '{{ states(''sensor.living_room_brightness'')|float(0) }}'
      distance_to_target: '{{ illuminance_target - cur_illuminance }}'
      illuminance_step: '{{ distance_to_target/2 if (distance_to_target|abs) > illuminance_margin
        else 0}}'
      brightness_step: '{{ (illuminance_step*max_brightness/max_illuminance) }}'
      brightness: '{{ max(min(cur_brightness + brightness_step, 100), 0) }}'
      brightness_dr: '{{ [[0.004*brightness**2+0.4*brightness+20,100]|min,0]|max }}'
      transition: '{{ 15 if brightness != cur_brightness else 0 }}'
  - if:
    - condition: template
      value_template: '{{ brightness == cur_brightness }}'
    then:
    - stop: No change in brightness
  - data:
      brightness_pct: '{{ brightness|int if brightness!=0 else 1 }}'
      transition: '{{transition}}'
    target:
      entity_id: light.living_room_light
    action: light.turn_on
  - data:
      brightness_pct: '{{ brightness_dr|int if brightness_dr>20 else 1 }}'
      transition: '{{transition}}'
    target:
      entity_id:
      - light.dining_room_light
    action: light.turn_on
  mode: restart
  trace:
    stored_traces: 1000
announce_door:
  alias: Announce Door
  fields:
    players:
      selector:
        entity:
          multiple: true
      required: true
    name:
      selector:
        text:
      required: true
    door:
      selector:
        select:
          options:
          - Front Door
          - Kitchen Door
      name: door
      required: true
  sequence:
  - variables:
      players: '{{ expand(players) | selectattr(''state'', ''ne'', ''playing'') |
        map(attribute=''entity_id'') | list }}'
      old_volumes: '{{ expand(players) | map(attribute=''attributes.volume_level'')
        | list | replace(''Undefined'', 0.5) }}'
  - data:
      volume_level: 0.5
    target:
      entity_id: '{{players}}'
    action: media_player.volume_set
  - data:
      media_player_entity_id: '{{players}}'
      message: '{{name}} is at the {{door}}'
    target:
      entity_id: tts.home_assistant_cloud
    action: tts.speak
  - repeat:
      count: '{{ players|count }}'
      sequence:
      - target:
          entity_id: '{{players[repeat.index-1]}}'
        data:
          volume_level: '{{old_volumes[repeat.index-1]}}'
        action: media_player.volume_set
  description: ''
  mode: single
window_position:
  alias: Window Position
  fields:
    entities:
      selector:
        entity:
          domain: cover
          multiple: true
      required: true
    switches:
      selector:
        entity:
          multiple: true
    action:
      selector:
        select:
          options:
          - Open
          - Closed Up
          - Closed Down
      required: true
    reason:
      selector:
        select:
          options:
          - Brightness
          - Temperature
          - Device
          - Button
          - Presence
          - Nighttime
  variables:
    switches: '{{ switches | default([]) }}'
    reason: '{{ reason | default('''') }}'
  sequence:
  - if:
    - condition: template
      value_template: '{{ expand(switches) | selectattr(''state'', ''eq'', ''on'')
        | list | length != 0 }}'
    then:
    - stop: Some conditional switches are on
  - repeat:
      for_each: '{{ entities }}'
      sequence:
      - action: script.turn_on
        target:
          entity_id: script.single_window
        data:
          variables:
            action: '{{ action }}'
            reason: '{{ reason }}'
            window: '{{ repeat.item }}'
  mode: parallel
  description: ''
  trace:
    stored_traces: 1000
  max: 100
kids_windows_open:
  alias: Kids Windows Open
  sequence:
  - target:
      entity_id:
      - input_boolean.kids_windows
    data: {}
    action: input_boolean.turn_on
  - parallel:
    - sequence:
      - wait_template: '{{ not is_state(''binary_sensor.eleanor_presence_delay'',''on'')
          }}

          '
      - data:
          switches:
          - binary_sensor.west_windows_closed_temperature
          - binary_sensor.eleanor_room_closed_button
          action: Open
          entities:
          - cover.eleanor_room_window
        action: script.window_position
    - sequence:
      - wait_template: '{{ not is_state(''binary_sensor.michael_presence_delay'',''on'')
          }}

          '
      - data:
          switches:
          - binary_sensor.west_windows_closed_temperature
          - binary_sensor.michael_room_closed_button
          action: Open
          entities:
          - cover.michael_room_window
        action: script.window_position
    - data:
        action: Open
        entities:
        - cover.back_hallway_window
      action: script.window_position
  mode: restart
  icon: mdi:blinds-open
  description: ''
notify_window:
  alias: Notify Window
  description: ''
  fields:
    window:
      selector:
        text:
      required: true
  sequence:
  - metadata: {}
    data:
      title: Windows
      message: Unable to open {{ window.split('.')[1] | replace('_', ' ') | title}}!
    action: notify.mobile_app_pixel_9_pro_xl
kids_windows_closed:
  alias: Kids Windows Closed
  sequence:
  - data: {}
    target:
      entity_id: input_boolean.kids_windows
    action: input_boolean.turn_off
  - parallel:
    - data:
        action: Closed Down
        entities:
        - cover.eleanor_room_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.michael_room_window
        reason: Nighttime
      action: script.window_position
    - data:
        action: Closed Down
        entities:
        - cover.back_hallway_window
        reason: Nighttime
      action: script.window_position
    - if:
      - condition: state
        entity_id: input_boolean.study_occupied
        state: 'on'
      then:
      - data:
          action: Closed Down
          entities:
          - cover.study_left_window
          - cover.study_right_window
          - cover.study_west_window
          reason: Nighttime
        action: script.window_position
  mode: restart
  icon: mdi:blinds-horizontal-closed
  description: ''
turn_off_interior_lights:
  alias: Turn Off Interior Lights
  sequence:
  - parallel:
    - sequence:
      - wait_template: '{{ not (states(''binary_sensor.everything_presence_one_6dbad0_occupancy'')|bool)
          and (now() - states.binary_sensor.everything_presence_one_6dbad0_occupancy.last_changed).total_seconds()
          > 900 }}'
        timeout:
          minutes: 5
      - parallel:
        - repeat:
            sequence:
            - target:
                entity_id:
                - light.parlor_lamp
              data: {}
              action: light.turn_off
            - delay:
                seconds: 30
            while:
            - condition: template
              value_template: '{{ repeat.index < 10 and is_state(''light.parlor_lamp'',''on'')
                }}'
        - repeat:
            sequence:
            - target:
                entity_id:
                - switch.parlor_table_lamp
              data: {}
              action: switch.turn_off
            - delay:
                seconds: 30
            while:
            - condition: template
              value_template: '{{ repeat.index < 10 and is_state(''switch.parlor_table_lamp'',''on'')
                }}'
        - repeat:
            sequence:
            - target:
                entity_id:
                - switch.living_room_end_table_lamp
              data: {}
              action: switch.turn_off
            - delay:
                seconds: 30
            while:
            - condition: template
              value_template: '{{ repeat.index < 10 and is_state(''switch.living_room_end_table_lamp'',''on'')
                }}'
    - if:
      - condition: state
        entity_id: input_boolean.guest_bedroom_occupied
        state: 'off'
      then:
      - repeat:
          sequence:
          - target:
              entity_id:
              - switch.guest_bedroom_lamp_socket_1
            data: {}
            action: switch.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''switch.guest_bedroom_lamp_socket_1'',''on'')
              }}'
    - if:
      - condition: state
        state: 'off'
        entity_id: input_boolean.study_occupied
      then:
      - wait_template: '{{ has_value(''light.study_lamp'') }}'
        timeout:
          minutes: 5
      - repeat:
          sequence:
          - target:
              entity_id:
              - light.study_lamp
            data: {}
            action: light.turn_off
          - delay:
              seconds: 30
          while:
          - condition: template
            value_template: '{{ repeat.index < 10 and is_state(''light.study_lamp'',''on'')
              }}'
  mode: restart
  icon: mdi:lightbulb-off-outline
  description: ''
turn_on_interior_lights:
  alias: Turn On Interior Lights
  sequence:
  - parallel:
    - target:
        entity_id:
        - light.parlor_lamp
      data:
        brightness_pct: 40
      action: light.turn_on
    - target:
        entity_id:
        - switch.parlor_table_lamp
      data: {}
      action: switch.turn_on
    - target:
        entity_id:
        - switch.living_room_end_table_lamp
      data: {}
      action: switch.turn_on
    - if:
      - condition: state
        entity_id: binary_sensor.evening
        state: 'off'
      then:
      - if:
        - condition: state
          entity_id: input_boolean.study_occupied
          state: 'off'
        then:
        - target:
            entity_id:
            - light.study_lamp
          data:
            brightness_pct: 40
          action: light.turn_on
      - if:
        - condition: state
          entity_id: input_boolean.guest_bedroom_occupied
          state: 'off'
        then:
        - target:
            entity_id:
            - switch.guest_bedroom_lamp_socket_1
          data: {}
          action: switch.turn_on
    - if:
      - condition: or
        conditions:
        - condition: state
          entity_id: light.living_room_light
          state: 'off'
        - condition: state
          entity_id: light.dining_room_light
          state: 'off'
      then:
      - action: light.turn_on
        target:
          entity_id:
          - light.living_room_light
          - light.dining_room_light
        data:
          brightness_pct: 1
      - action: script.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: script.living_room_lights
  mode: single
  icon: mdi:lightbulb-on-outline
  description: ''
christmas_lights_on:
  alias: Christmas Lights On
  sequence:
  - action: switch.turn_on
    data: {}
    target:
      entity_id:
      - switch.family_christmas_tree_socket_1
      - switch.formal_christmas_tree_socket_1
      - switch.playroom_christmas_tree_socket_1
  - if:
    - condition: or
      conditions:
      - condition: state
        entity_id: media_player.parlor
        state: paused
      - condition: state
        entity_id: media_player.parlor
        state: 'off'
    - condition: state
      entity_id: binary_sensor.daytime
      state: 'on'
    then:
    - action: media_player.volume_set
      data:
        volume_level: 0.15
      target:
        entity_id: media_player.parlor
    - action: media_player.media_play
      target:
        entity_id: media_player.parlor
      data: {}
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.christmas_music
      data: {}
  description: ''
christmas_lights_off:
  alias: Christmas Lights Off
  sequence:
  - action: switch.turn_off
    data: {}
    target:
      entity_id:
      - switch.family_christmas_tree_socket_1
      - switch.formal_christmas_tree_socket_1
      - switch.playroom_christmas_tree_socket_1
  - if:
    - condition: state
      entity_id: input_boolean.christmas_music
      state: 'on'
    then:
    - action: media_player.media_pause
      target:
        entity_id: media_player.parlor
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.christmas_music
  description: ''
single_window:
  alias: Single Window
  fields:
    window:
      selector:
        entity:
          domain: cover
      required: true
    action:
      selector:
        select:
          options:
          - Open
          - Closed Up
          - Closed Down
      required: true
    reason:
      selector:
        select:
          options:
          - Brightness
          - Temperature
          - Device
          - Button
          - Presence
          - Nighttime
  variables:
    reason: '{{ reason | default('''') }}'
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ not has_value(window) }}'
      sequence:
      - stop: Window entity disabled/missing
    - conditions:
      - condition: template
        value_template: '{{ states(window) in [''unavailable'',''unknown'',''none'','''']
          }}'
      sequence:
      - stop: Window entity unavailable
  - variables:
      curr_tilt: '{{ state_attr(window, ''current_tilt_position'') if state_attr(window,''current_tilt_position'')
        is number else None }}'
      position: "{% if curr_tilt is number %}\n  {{ 'Closed Down' if curr_tilt < 30
        else 'Closed Up' if curr_tilt > 70 else 'Open' }}\n{% else %}\n  unknown\n{%
        endif %}"
      tilt: '{{ 0 if action == ''Closed Down'' else 100 if action == ''Closed Up''
        else 50 }}'
      final: '{{ action.split('' '')[0] | lower }}'
  - if:
    - condition: template
      value_template: '{{ final == ''closed'' }}'
    then:
    - action: input_text.set_value
      target:
        entity_id: input_text.blind_{{ window.split('.')[1] }}_closed_reason
      data:
        value: '{{ reason }}'
  - if:
    - condition: template
      value_template: '{{ position != action and position != ''unknown'' }}'
    then:
    - wait_template: '{{ (states(window) | string) not in [''opening'',''closing'']
        }}'
      timeout: 00:01:00
    - action: cover.set_cover_tilt_position
      data:
        tilt_position: '{{ tilt }}'
      target:
        entity_id: '{{ window }}'
      continue_on_error: true
    - wait_template: '{{ states(window) == final }}'
      continue_on_timeout: true
      timeout: 00:05:00
    - if:
      - condition: template
        value_template: '{{ states(window) != final }}'
      then:
      - data:
          window: '{{ window }}'
        action: script.notify_window
  - if:
    - condition: template
      value_template: '{{ window == ''cover.eleanor_room_window'' }}'
    then:
    - stop: Eleanor's window disabled
  mode: parallel
  max: 100
timer_add_time:
  alias: 'Timer: Add time'
  description: Add a duration to a running/paused timer; starts it if idle.
  mode: single
  fields:
    timer_entity:
      name: Timer
      description: Timer entity to extend
      selector:
        entity:
          domain: timer
    add_time:
      name: Time to add
      description: Amount to add (hours/minutes/seconds)
      selector:
        duration: {}
  sequence:
  - variables:
      e: '{{ timer_entity }}'
      add_h: '{{ add_time.hours | default(0) | int }}'
      add_m: '{{ add_time.minutes | default(0) | int }}'
      add_s: '{{ add_time.seconds | default(0) | int }}'
      add_sec: '{{ (add_h*3600 + add_m*60 + add_s) | int }}'
      remaining_sec: "{% if is_state(e,'active') %}\n  {% set fin = state_attr(e,'finishes_at')
        %}\n  {% if fin %}\n    {{ (as_timestamp(fin) - as_timestamp(now())) | round(0)
        }}\n  {% else %}\n    {% set r = state_attr(e,'remaining') | default('0:00:00')
        %}\n    {% set p = r.split(':') %}\n    {{ (p[0]|int)*3600 + (p[1]|int)*60
        + (p[2].split('.')[0]|int) }}\n  {% endif %}\n{% elif is_state(e,'paused')
        %}\n  {% set r = state_attr(e,'remaining') | default('0:00:00') %}\n  {% set
        p = r.split(':') %}\n  {{ (p[0]|int)*3600 + (p[1]|int)*60 + (p[2].split('.')[0]|int)
        }}\n{% else %}\n  0\n{% endif %}"
      new_total: '{{ [remaining_sec + add_sec, 0] | max | int }}'
  - condition: template
    value_template: '{{ add_sec > 0 }}'
  - action: timer.start
    target:
      entity_id: '{{ e }}'
    data:
      duration: '{{ new_total }}'
announce:
  alias: Announce
  fields:
    players:
      selector:
        entity:
          multiple: true
      required: true
    message:
      selector:
        text:
      required: true
  sequence:
  - if:
    - condition: state
      state: 'off'
      entity_id: schedule.daytime
    then:
    - stop: Don't announce at night
  - if:
    - condition: state
      entity_id: input_boolean.in_a_teams_meeting
      state: 'on'
    then:
    - stop: In a meeting
  - variables:
      players: '{{ expand(players)|map(attribute=''entity_id'')|list }}'
      old_volumes: '{{ expand(players)|map(attribute=''attributes.volume_level'')|list|replace(''Undefined'',
        0.5) }}'
  - repeat:
      count: '{{ players|count }}'
      sequence:
      - target:
          entity_id: '{{players[repeat.index-1]}}'
        action: media_player.media_pause
        continue_on_error: true
  - data:
      volume_level: 0.5
    target:
      entity_id: '{{players}}'
    action: media_player.volume_set
  - data:
      media_player_entity_id: '{{players}}'
      message: '{{message}}'
    target:
      entity_id: tts.home_assistant_cloud
    action: tts.speak
  - repeat:
      count: '{{ players|count }}'
      sequence:
      - target:
          entity_id: '{{players[repeat.index-1]}}'
        data:
          volume_level: '{{old_volumes[repeat.index-1]}}'
        action: media_player.volume_set
        enabled: true
  description: ''
  mode: queued
  max: 10
