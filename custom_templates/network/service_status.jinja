{# # File: config/custom_templates/service_status.jinja ## #}
{# Macros for Service Status / Health:
   - Normalizes assorted inputs (bools, strings, numbers, HTTP codes) into states:
     ['down', 'maintenance', 'degraded', 'unknown', 'up']
   - Provides: names, icons, colors, descriptions, bars (0–4), quality %, labels
   - Extras: HTTP status mapping, uptime/SLO & error-budget helpers, fleet rollups
#}

{% from 'helpers.jinja' import level_find %}

{# -------------------- Canonical states & lookups -------------------- #}
{% set states = ['down','maintenance','degraded','unknown','up'] %}

{% set names = ["Down","Maintenance","Degraded","Unknown","Up"] %}
{% set shorts = ["Down","Maint","Degrad","Unkn","Up"] %}
{% set longs = [
  "Service: Down",
  "Service: Maintenance",
  "Service: Degraded",
  "Service: Unknown",
  "Service: Up"
] %}

{% set icons = [
  "mdi:close-octagon",     # down
  "mdi:wrench",            # maintenance
  "mdi:alert",             # degraded
  "mdi:help-circle",       # unknown
  "mdi:check-circle"       # up
] %}

{% set colors = [
  "#ef4444",  # down (red)
  "#3b82f6",  # maintenance (blue)
  "#f59e0b",  # degraded (amber)
  "#9ca3af",  # unknown (gray)
  "#22c55e",  # up (green)
  "disabled"
] %}

{% set descriptions = [
  "Not responding or failing health checks.",
  "Planned work; functionality may be reduced or unavailable.",
  "Partially impaired—elevated latency or error rate.",
  "No recent data or mixed signals.",
  "All checks passing; operating normally."
] %}

{# Map canonical state → a synthetic quality % for visuals #}
{% set state_quality = {
  'down': 0,
  'maintenance': 50,
  'degraded': 60,
  'unknown': 35,
  'up': 100
} %}

{# Bars thresholds (lower bounds) for quality % → 0..4 bars #}
{% set bps_quality = [0, 10, 35, 60, 85] %}

{# -------------------- Normalization helpers -------------------- #}
{# Normalize a variety of inputs to one of the canonical string states above. #}
{% macro normalize_state(val) -%}
  {%- if val is boolean -%}
    {{ 'up' if val else 'down' }}
  {%- elif val is number -%}
    {# Accept common numeric schemes: 0/1, 0/2 (nagios), 1/2/3, etc. #}
    {%- set n = val|int -%}
    {%- if n in [200] -%}up
    {%- elif 200 <= n < 400 -%}up
    {%- elif n == 429 -%}degraded
    {%- elif 400 <= n < 500 -%}degraded
    {%- elif 500 <= n < 600 -%}down
    {%- elif n in [0] -%}up {# some agents: 0=OK #}
    {%- elif n in [1] -%}degraded {# WARN #}
    {%- elif n in [2] -%}down {# CRIT #}
    {%- elif n in [3] -%}unknown
    {%- else -%}unknown
    {%- endif -%}
  {%- else -%}
    {%- set s = (val|string)|lower -%}
    {%- if s in ['up','ok','pass','passing','healthy','green','operational'] -%}up
    {%- elif s in ['maint','maintenance','planned','scheduled'] -%}maintenance
    {%- elif s in ['warn','warning','degraded','minor','partial','yellow'] -%}degraded
    {%- elif s in ['down','fail','failed','critical','outage','red'] -%}down
    {%- else -%}unknown
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

{# HTTP-specific mapping if you want to pass raw status codes #}
{% macro state_from_http(code) -%}
  {%- if code is not number -%}unknown
  {%- elif 200 <= (code|int) < 400 -%}up
  {%- elif (code|int) == 429 -%}degraded
  {%- elif 400 <= (code|int) < 500 -%}degraded
  {%- elif 500 <= (code|int) < 600 -%}down
  {%- else -%}unknown
  {%- endif -%}
{%- endmacro %}

{# -------------------- Core getters -------------------- #}
{% macro index(state) -%}
  {%- set s = normalize_state(state) -%}
  {%- if s == 'down' -%}1
  {%- elif s == 'maintenance' -%}2
  {%- elif s == 'degraded' -%}3
  {%- elif s == 'unknown' -%}4
  {%- else -%}5
  {%- endif -%}
{%- endmacro %}

{# djlint:off #}
{% macro name(state) %}{{ names[index(state)|int - 1] }}{% endmacro %}
{% macro short(state) %}{{ shorts[index(state)|int - 1] }}{% endmacro %}
{% macro long(state) %}{{ longs[index(state)|int - 1] }}{% endmacro %}
{% macro icon(state) %}{{ icons[index(state)|int - 1] }}{% endmacro %}
{% macro color(state) %}{{ colors[index(state)|int - 1] }}{% endmacro %}
{% macro desc(state) %}{{ descriptions[index(state)|int - 1] }}{% endmacro %}
{# djlint:on #}

{% macro quality_pct(state) -%}
  {%- set s = normalize_state(state) -%}
  {{ state_quality.get(s, 35) }}
{%- endmacro %}

{% macro bars(state) -%}
  {{ level_find(quality_pct(state)|float, bps_quality) - 1 }}
{%- endmacro %}

{# -------------------- Labels -------------------- #}
{% macro label(state, note=None) -%}
  {{ name(state) }}{{ ' • ' ~ note if note else '' }}
{%- endmacro %}

{% macro chip(state) -%}
  {{ short(state) }}
{%- endmacro %}

{# HTTP flavored: "Up • 200 • 42 ms" #}
{% macro http_label(code, latency_ms=None) -%}
  {%- set st = state_from_http(code) -%}
  {{ name(st) }} • {{ code }}{{ ' • ' ~ (latency_ms|round(0)) ~ ' ms' if latency_ms is not none else '' }}
{%- endmacro %}

{# -------------------- Booleans & paging hints -------------------- #}
{% macro is_up(state) -%}{{ normalize_state(state) == 'up' }}{%- endmacro %}
{% macro is_degraded(state) -%}{{ normalize_state(state) == 'degraded' }}{%- endmacro %}
{% macro is_down(state) -%}{{ normalize_state(state) == 'down' }}{%- endmacro %}
{% macro is_maintenance(state) -%}{{ normalize_state(state) == 'maintenance' }}{%- endmacro %}
{% macro is_unknown(state) -%}{{ normalize_state(state) == 'unknown' }}{%- endmacro %}

{# Page if down; optionally also page on degraded if policy demands #}
{% macro should_page(state, page_on_degraded=false) -%}
  {%- set s = normalize_state(state) -%}
  {{ (s == 'down') or (page_on_degraded and s == 'degraded') }}
{%- endmacro %}

{# -------------------- Uptime / SLO / Error Budget -------------------- #}
{# Compute uptime % from up_seconds over a window (seconds). #}
{% macro uptime_pct(up_seconds, window_seconds) -%}
  {%- set u = (up_seconds|float) -%}
  {%- set w = (window_seconds|float) -%}
  {%- set p = (u / (w if w>0 else 1e-9)) * 100.0 -%}
  {{ 0 if p < 0 else (100 if p > 100 else p) }}
{%- endmacro %}

{# Given SLO target % and a window (seconds), how many seconds of downtime are allowed (error budget)? #}
{% macro allowed_downtime_seconds(slo_pct, window_seconds) -%}
  {{ (1.0 - (slo_pct|float)/100.0) * (window_seconds|float) }}
{%- endmacro %}

{% macro budget_used_seconds(downtime_seconds) -%}
  {{ downtime_seconds|float }}
{%- endmacro %}

{% macro budget_remaining_seconds(slo_pct, window_seconds, downtime_seconds) -%}
  {{ allowed_downtime_seconds(slo_pct, window_seconds) - budget_used_seconds(downtime_seconds) }}
{%- endmacro %}

{% macro format_duration(seconds) -%}
  {%- set s = (seconds|float) -%}
  {%- if s < 60 -%}{{ s|round(0) }}s
  {%- elif s < 3600 -%}{{ (s/60.0)|round(1) }}m
  {%- elif s < 86400 -%}{{ (s/3600.0)|round(1) }}h
  {%- else -%}{{ (s/86400.0)|round(1) }}d
  {%- endif -%}
{%- endmacro %}

{# Example: "SLO 99.9% • Budget 43.8m • Used 12.3m • 72% remaining" #}
{% macro budget_label(slo_pct, window_seconds, downtime_seconds) -%}
  {%- set allowed = allowed_downtime_seconds(slo_pct, window_seconds)|float -%}
  {%- set used = budget_used_seconds(downtime_seconds)|float -%}
  {%- set rem = (allowed - used) -%}
  {%- set rem_pct = (rem / (allowed if allowed>0 else 1e-9)) * 100.0 -%}
  SLO {{ (slo_pct|float)|round(3) }}% • Budget {{ format_duration(allowed) }} • Used {{ format_duration(used) }} • {{ (0 if rem_pct<0 else rem_pct)|round(0) }}% remaining
{%- endmacro %}

{# Convert 30-day-month budget helper: minutes allowed for a given SLO #}
{% macro monthly_budget_minutes(slo_pct, days=30) -%}
  {{ ((1.0 - (slo_pct|float)/100.0) * (days|float) * 24.0 * 60.0) }}
{%- endmacro %}

{# -------------------- Aggregates / Fleet rollups -------------------- #}
{# Count states in a list (e.g., from multiple checks) #}
{% macro count_states(items) -%}
  {%- set d = {'up':0,'degraded':0,'maintenance':0,'down':0,'unknown':0} -%}
  {%- for it in items -%}
    {%- set s = normalize_state(it) -%}
    {%- set _ = d.update({s: d[s] + 1}) -%}
  {%- endfor -%}
  {{ d }}
{%- endmacro %}

{% macro fleet_label(states_list) -%}
  {%- set c = count_states(states_list) -%}
  {%- set total = (c['up'] + c['degraded'] + c['maintenance'] + c['down'] + c['unknown']) -%}
  {%- if total == 0 -%}
    No checks
  {%- elif c['down'] == 0 and c['degraded'] == 0 and c['unknown'] == 0 -%}
    All Up ({{ total }})
  {%- else -%}
    {{ c['down'] }} Down • {{ c['degraded'] }} Degraded • {{ c['maintenance'] }} Maint • {{ c['up'] }} Up{{ ' • ' ~ c['unknown'] ~ ' Unknown' if c['unknown']>0 else '' }}
  {%- endif -%}
{%- endmacro %}

{# Fleet health score (0..100) averaging per-state quality % #}
{% macro fleet_quality_pct(states_list) -%}
  {%- set n = states_list|count -%}
  {%- if n == 0 -%}0
  {%- else -%}
    {%- set total = 0 -%}
    {%- for s in states_list -%}{% set total = total + (state_quality.get(normalize_state(s), 35)) %}{%- endfor -%}
    {{ total / n }}
  {%- endif -%}
{%- endmacro %}

{% macro fleet_color(states_list) -%}
  {%- set q = fleet_quality_pct(states_list)|float -%}
  {%- set lvl = level_find(q, bps_quality) -%}
  {%- set palette = ["#ef4444","#f59e0b","#84cc16","#22c55e","#22c55e","disabled"] -%}
  {{ palette[lvl-1] }}
{%- endmacro %}

{# -------------------- Guidance -------------------- #}
{% macro advice(state) -%}
  {%- set s = normalize_state(state) -%}
  {%- if s == 'up' -%}
    Healthy—no action needed.
  {%- elif s == 'maintenance' -%}
    Respect the window; suppress paging if planned.
  {%- elif s == 'degraded' -%}
    Investigate elevated latency/error rates; consider rate-limits and capacity.
  {%- elif s == 'down' -%}
    Page on-call; check recent deploys, dependencies, and infra health.
  {%- else -%}
    Unknown—verify check freshness, agent health, and monitoring pipeline.
  {%- endif -%}
{%- endmacro %}
