{#- Unit conversion core - one entrypoint: u_convert_value(value, from_unit, to_unit) -#}
{% from 'units/normalize_units.jinja' import normalize_unit, split_compound_unit %}
{% import 'units/temperature.jinja' as temp %}
{% from 'units/prefix_scaling.jinja' import split_prefix_unit, scale_value %}

{#-  -------------------- dimension maps (to SI base) -------------------- -#}
{# djlint:off #}
{% set LENGTH_TO_M = {
  'mm': 0.001, 'cm': 0.01, 'm': 1, 'km': 1000,
  'in': 0.0254, 'ft': 0.3048, 'yd': 0.9144, 'mi': 1609.344, 'nmi': 1852
} %}

{%- set TIME_TO_S = { 'ms': 0.001, 's': 1, 'min': 60, 'h': 3600, 'd': 86400 } -%}

{%- set POWER_TO_W = { 'W': 1, 'kW': 1000, 'MW': 1000000, 'hp': 745.6998715822702 } -%}

{% set ENERGY_TO_J = {
  'J': 1, 'kJ': 1000,
  'Wh': 3600, 'kWh': 3600000
} %}

{% set PRESSURE_TO_PA = {
  'Pa': 1, 'hPa': 100, 'kPa': 1000,
  'bar': 100000, 'mbar': 100, 'psi': 6894.757293168
} %}

{#- m³ is base. Liter is 1e-3 m³. US customary included. -#}
{% set VOLUME_TO_M3 = {
  'm³': 1, 'L': 0.001, 'mL': 0.000001,
  'ft³': 0.028316846592, 'in³': 1.6387064e-5,
  'gal': 0.003785411784, 'qt': 0.000946352946, 'pt': 0.000473176473, 'cup': 0.000236588236, 'fl oz': 2.95735295625e-5
} %}

{#- Data size base is byte (B). SI: KB=1000 B, IEC: KiB=1024 B. -#}
{% set BYTES_TO_B = { 'B': 1, 'KB': 1000, 'MB': 1000000, 'GB': 1000000000, 'TB': 1000000000000,
                      'KiB': 1024, 'MiB': 1048576, 'GiB': 1073741824, 'TiB': 1099511627776 } %}

{#- Bits family -#}
{%- set BITS_TO_BIT = { 'bit': 1, 'kbit': 1000, 'Mbit': 1000000, 'Gbit': 1000000000 } -%}

{#- Generic counts, e.g., revolutions -#}
{%- set COUNT_TO_COUNT = { 'rev': 1, 'count': 1 } -%}

{# illuminance to lux #}
{% set ILLUMINANCE_TO_LX = {
  'lx': 1,
  'klx': 1000,
  'mlx': 0.001,
  'fc': 10.763910416709722
} %}
{# djlint:on #}

{#-  -------------------- dimension detection -------------------- -#}
{% macro get_dimension(u) -%}
  {%- set unit = u|string -%}
  {%- if unit in LENGTH_TO_M %}length
  {%- elif unit in TIME_TO_S %}time
  {%- elif unit in POWER_TO_W %}power
  {%- elif unit in ENERGY_TO_J %}energy
  {%- elif unit in PRESSURE_TO_PA %}pressure
  {%- elif unit in VOLUME_TO_M3 %}volume
  {%- elif unit in BYTES_TO_B %}bytes
  {%- elif unit in BITS_TO_BIT %}bits
  {%- elif unit in ILLUMINANCE_TO_LX %}illuminance
  {%- elif unit in ['°C','°F','K'] %}temperature
  {%- elif unit in COUNT_TO_COUNT %}count
  {%- else %}unknown
  {%- endif -%}
{%- endmacro %}

{#-  -------------------- helpers: to/from base -------------------- -#}
{% macro to_base_value(v, unit) -%}
  {%- set value = v|float -%}
  {%- set u = unit|string -%}
  {%- set dim = get_dimension(u) -%}
  {%- if dim == 'length' -%}
    {{- {'value': value * LENGTH_TO_M[u], 'unit': 'm'} | tojson -}}
  {%- elif dim == 'time' -%}
    {{- {'value': value * TIME_TO_S[u], 'unit': 's'} | tojson -}}
  {%- elif dim == 'power' -%}
    {{- {'value': value * POWER_TO_W[u], 'unit': 'W'} | tojson -}}
  {%- elif dim == 'energy' -%}
    {{- {'value': value * ENERGY_TO_J[u], 'unit': 'J'} | tojson -}}
  {%- elif dim == 'pressure' -%}
    {{- {'value': value * PRESSURE_TO_PA[u], 'unit': 'Pa'} | tojson -}}
  {%- elif dim == 'volume' -%}
    {{- {'value': value * VOLUME_TO_M3[u], 'unit': 'm³'} | tojson -}}
  {%- elif dim == 'bytes' -%}
    {{- {'value': value * BYTES_TO_B[u], 'unit': 'B'} | tojson -}}
  {%- elif dim == 'bits' -%}
    {{- {'value': value * BITS_TO_BIT[u], 'unit': 'bit'} | tojson -}}
  {%- elif dim == 'illuminance' -%}
    {{- {'value': value * ILLUMINANCE_TO_LX[u], 'unit': 'lx'} | tojson -}}
  {%- elif dim == 'count' -%}
    {{- {'value': value * COUNT_TO_COUNT[u], 'unit': 'count'} | tojson -}}
  {%- else -%}
    {{- {'error': 'unknown unit ' ~ u} | tojson -}}
  {%- endif -%}
{%- endmacro %}

{% macro from_base_value(v, to_unit) -%}
  {%- set value = v|float -%}
  {%- set u = to_unit|string -%}
  {%- set dim = get_dimension(u) -%}
  {%- if dim == 'length' -%}
    {{- {'value': value / LENGTH_TO_M[u], 'unit': u} | tojson -}}
  {%- elif dim == 'time' -%}
    {{- {'value': value / TIME_TO_S[u], 'unit': u} | tojson -}}
  {%- elif dim == 'power' -%}
    {{- {'value': value / POWER_TO_W[u], 'unit': u} | tojson -}}
  {%- elif dim == 'energy' -%}
    {{- {'value': value / ENERGY_TO_J[u], 'unit': u} | tojson -}}
  {%- elif dim == 'pressure' -%}
    {{- {'value': value / PRESSURE_TO_PA[u], 'unit': u} | tojson -}}
  {%- elif dim == 'volume' -%}
    {{- {'value': value / VOLUME_TO_M3[u], 'unit': u} | tojson -}}
  {%- elif dim == 'bytes' -%}
    {{- {'value': value / BYTES_TO_B[u], 'unit': u} | tojson -}}
  {%- elif dim == 'bits' -%}
    {{- {'value': value / BITS_TO_BIT[u], 'unit': u} | tojson -}}
  {%- elif dim == 'illuminance' -%}
    {{- {'value': value / ILLUMINANCE_TO_LX[u], 'unit': u} | tojson -}}
  {%- elif dim == 'count' -%}
    {{- {'value': value / COUNT_TO_COUNT[u], 'unit': u} | tojson -}}
  {%- else -%}
    {{- {'error': 'unknown unit ' ~ u} | tojson -}}
  {%- endif -%}
{%- endmacro %}

{#-  -------------------- scalar, rate, and top-level -------------------- -#}
{% macro convert_scalar(value, from_u, to_u) -%}
  {%- set fu = from_u|string -%}
  {%- set tu = to_u|string -%}
  {%- set df = get_dimension(fu) -%}
  {%- set dt = get_dimension(tu) -%}
  {%- if df == 'unknown' or dt == 'unknown' or df != dt -%}
    {{- {'error': 'incompatible: ' ~ fu ~ ' -> ' ~ tu} | tojson -}}
  {%- elif df == 'temperature' -%}
    {%- set r = temp.convert_temp(value, fu, tu) | from_json -%}
    {%- if r.error is defined -%}
      {{- {'error': r.error} | tojson -}}
    {%- else -%}
      {{- {'value': r.value, 'unit': r.unit} | tojson -}}
    {%- endif -%}
  {%- else -%}
    {%- set base = to_base_value(value, fu) | from_json -%}
    {%- if base.error is defined -%}
      {{- base | tojson -}}
    {%- else -%}
      {{- from_base_value(base.value, tu) -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

{% macro convert_rate(value, from_parts, to_parts) -%}
  {%- set num = convert_scalar(value, from_parts.num, to_parts.num) | from_json -%}
  {%- if num.error is defined -%}
    {{- num | tojson -}}
  {%- else -%}
    {%- if from_parts.den and to_parts.den -%}
      {%- set den = convert_scalar(1, from_parts.den, to_parts.den) | from_json -%}
      {%- if den.error is defined -%}{{- den | tojson -}}
      {%- else -%}
        {{- {'value': num.value / den.value, 'unit': to_parts.num ~ '/' ~ to_parts.den} | tojson -}}
      {%- endif -%}
    {%- else -%}
      {{- {'value': num.value, 'unit': to_parts.num} | tojson -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

{#- Returns dict: {"value": float, "unit": str} -#}
{% macro u_convert(value, from_unit, to_unit) -%}
  {%- set fu = normalize_unit(from_unit|string) -%}
  {%- set tu = normalize_unit(to_unit|string) -%}
  {%- if fu == tu -%}
    {{- {'value': value|float, 'unit': tu} | tojson -}}
  {%- else -%}
    {%- set fp = split_compound_unit(fu) | from_json -%}
    {%- set tp = split_compound_unit(tu) | from_json -%}
    {%- if fp.den or tp.den -%}
      {{- convert_rate(value, fp, tp) -}}
    {%- else -%}
      {{- convert_scalar(value, fu, tu) -}}
    {%- endif -%}
  {%- endif -%}
{%- endmacro %}

{#- Returns number only -#}
{% macro u_convert_value(value, from_unit, to_unit) -%}
  {%- set r = u_convert(value, from_unit, to_unit) | from_json -%}
  {%- if r.error is defined -%}
    {{- none -}}
  {%- else -%}
    {{- r.value -}}
  {%- endif -%}
{%- endmacro %}

{#- Returns number only given an entity ID -#}
{% macro u_convert_entity(eid, to_unit) -%}
  {{- u_convert_value(states(eid), state_attr(eid,'unit_of_measurement'), to_unit) -}}
{%- endmacro %}
