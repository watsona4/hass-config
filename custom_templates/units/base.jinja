{#- Unit conversion core - one entrypoint: u_convert_value(value, from_unit, to_unit) -#}
{% from 'units/normalize_units.jinja' import normalize_unit, split_compound_unit %}
{% from 'units/prefix_scaling.jinja' import split_prefix_unit, scale_value, autoscale_prefix %}

{#-  -------------------- dimension maps (to SI base) -------------------- -#}

{# djlint:off #}
{% set CONVERSION = {
    'length': {
        'base': 'm',
        'map': { 'in': 0.0254, 'ft': 0.3048, 'yd': 0.9144, 'mi': 1609.344, 'nmi': 1852 }
    },
    'time': {
        'base': 's',
        'map': { 'min': 60, 'h': 3600, 'd': 86400 }
    },
    'power': {
        'base': 'W',
        'map': { 'hp': 745.6998715822702 }
    },
    'energy': {
        'base': 'J',
        'map': { 'Wh': 3600 }
    },
    'pressure': {
        'base': 'Pa',
        'map': { 'bar': 100000, 'psi': 6894.757293168 }
    },
    'volume': {
        'base': 'm³',
        'map': { 'L': 0.001, 'ft³': 0.028316846592, 'in³': 0.000016387064,
            'gal': 0.003785411784, 'qt': 0.000946352946, 'pt': 0.000473176473,
            'cup': 0.000236588236, 'fl oz': 0.0000295735295625,
        }
    },
    'illuminance': {
        'base': 'lx',
        'map': { 'fc': 10.763910416709722 }
    },
    'data': {
        'base': 'B',
        'map': { 'bit': 0.125 }
    },
    'temperature': {
        'base': '°C',
        'units': ['°C','°F','K']
    },
    '': {
        'base': '%',
        'map': { 'ppm': 0.0001, 'ppb': 0.0000001 }
    },
} %}
{# djlint:on #}

{# Derive FACTORS_TO_BASE from CONVERSION #}
{% set FTN = namespace(val={}) %}
{% for dim, spec in CONVERSION.items() %}
    {% if 'map' in spec %}
        {% set FTN.val = FTN.val | combine({ dim: spec.map }) %}
    {% endif %}
{% endfor %}
{% set FACTORS_TO_BASE = FTN.val %}

{# Derive BASE_UNIT from CONVERSION #}
{% set BUN = namespace(val={}) %}
{% for dim, spec in CONVERSION.items() %}
    {% set BUN.val = BUN.val | combine({ dim: spec.base }) %}
{% endfor %}
{% set BASE_UNIT = BUN.val %}

{# Optional: temperature unit set for quick checks #}
{% set TEMP_UNITS = CONVERSION['temperature']['units'] %}

{# -------------------- temperature helpers (inline, no external file) -------------------- #}
{% macro temp_to_c(v, u) -%}
    {%- set val = v|float -%}
    {%- if u == '°C' -%}
        {{- val -}}
    {%- elif u == '°F' -%}
        {{- (val - 32) * 5/9 -}}
    {%- elif u == 'K' -%}
        {{- val - 273.15 -}}
    {%- else -%}
        {{- none -}}
    {%- endif -%}
{%- endmacro %}

{% macro temp_from_c(v_c, u) -%}
    {%- set val = v_c|float -%}
    {%- if u == '°C' -%}
        {{- val -}}
    {%- elif u == '°F' -%}
        {{- val * 9/5 + 32 -}}
    {%- elif u == 'K' -%}
        {{- val + 273.15 -}}
    {%- else -%}
        {{- none -}}
    {%- endif -%}
{%- endmacro %}

{#-  ----------------- dimension detection -------------------- -#}
{% macro get_dimension(u) %}
    {%- set unit = normalize_unit(u|string) -%}
    {%- for dim, spec in CONVERSION.items() -%}
        {%- if 'map' in spec and (unit == spec.base or unit in spec.map) -%}
            {{- dim -}}
            {%- break -%}
        {%- elif dim == 'temperature' and unit in spec.units -%}
            {{- dim -}}
            {%- break -%}
        {%- endif -%}
    {%- endfor -%}
    {%- if loop is defined and loop.last and not loop.broken -%}
        {{- 'unknown' -}}
    {%- endif -%}
{% endmacro %}

{#-  -------------------- helpers: to/from base -------------------- -#}
{% macro to_base_value(v, unit) -%}
    {%- set u_raw = normalize_unit(unit|string) -%}
    {%- set sp = split_prefix_unit(u_raw) | from_json -%}
    {%- set dim = get_dimension(sp.base) -%}
    {%- set system = ('IEC' if (sp.prefix|string).endswith('i') else 'SI') -%}
    {%- set val = scale_value(v|float, sp.prefix, '', system) | float -%}
    {%- if dim in CONVERSION and dim != 'temperature' -%}
        {%- set spec = CONVERSION[dim] -%}
        {%- if sp.base == spec.base -%}
            {{- {'value': val, 'unit': spec.base} | tojson -}}
        {%- elif sp.base in spec.map -%}
            {{- {'value': val * spec.map[sp.base], 'unit': spec.base} | tojson -}}
        {%- else -%}
            {{- {'error': 'unknown ' ~ dim ~ ' unit ' ~ sp.base} | tojson -}}
        {%- endif -%}
    {%- elif dim == 'temperature' -%}
        {%- set c = temp_to_c(val, sp.base) -%}
        {%- if c is none -%}
            {{- {'error': 'unknown temperature unit ' ~ sp.base} | tojson -}}
        {%- else -%}
            {{- {'value': c, 'unit': '°C'} | tojson -}}
        {%- endif -%}
    {%- else -%}
        {{- {'error': 'unknown unit ' ~ sp.base} | tojson -}}
    {%- endif -%}
{%- endmacro %}

{% macro from_base_value(v, to_unit) -%}
    {%- set u_raw = to_unit|string -%}
    {%- set sp = split_prefix_unit(u_raw) | from_json -%}
    {%- set dim = get_dimension(sp.base) -%}
    {%- set system = ('IEC' if (sp.prefix|string).endswith('i') else 'SI') -%}
    {%- set value = v|float -%}
    {%- if dim in CONVERSION and dim != 'temperature' -%}
        {%- set spec = CONVERSION[dim] -%}
        {%- if sp.base == spec.base -%}
            {{- {'value': scale_value(value, '', sp.prefix, system) , 'unit': sp.prefix ~ sp.base } | tojson -}}
        {%- elif sp.base in spec.map -%}
            {{- {'value': scale_value(value / spec.map[sp.base], '', sp.prefix, system) , 'unit': sp.prefix ~ sp.base } | tojson -}}
        {%- else -%}
            {{- {'error': 'unknown ' ~ dim ~ ' unit ' ~ sp.base} | tojson -}}
        {%- endif -%}
    {%- elif dim == 'temperature' -%}
        {%- set t = temp_from_c(value, sp.base) -%}
        {%- if t is none -%}
            {{- {'error': 'unknown temperature unit ' ~ sp.base} | tojson -}}
        {%- else -%}
            {{- {'value': t, 'unit': sp.base} | tojson -}}
        {%- endif -%}
    {%- else -%}
        {{- {'error': 'unknown unit ' ~ sp.base} | tojson -}}
    {%- endif -%}
{%- endmacro %}

{#-  -------------------- scalar, rate, and top-level -------------------- -#}
{% macro convert_scalar(value, from_u, to_u) %}
    {%- set fu = from_u|string -%}
    {%- set tu = to_u|string -%}
    {%- set fsp = split_prefix_unit(normalize_unit(fu)) | from_json -%}
    {%- set tsp = split_prefix_unit(normalize_unit(tu)) | from_json -%}
    {%- set df = get_dimension(fsp.base) -%}
    {%- set dt = get_dimension(tsp.base) -%}
    {%- if df == 'unknown' or dt == 'unknown' or df != dt -%}
        {{- {'error': 'incompatible: ' ~ fu ~ ' -> ' ~ tu} | tojson -}}
    {%- else -%}
        {%- set base = to_base_value(value, fu) | from_json -%}
        {%- if base.error is defined -%}
            {{- base | tojson -}}
        {%- else -%}
            {{- from_base_value(base.value, tu) -}}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{% macro convert_rate(value, from_parts, to_parts) %}
    {%- set num = convert_scalar(value, from_parts.num, to_parts.num) | from_json -%}
    {%- if num.error is defined -%}
        {{- num | tojson -}}
    {%- else -%}
        {%- if from_parts.den and to_parts.den -%}
            {%- set den = convert_scalar(1, from_parts.den, to_parts.den) | from_json -%}
            {%- if den.error is defined -%}{{- den | tojson -}}
            {%- else -%}
                {{- {'value': num.value / den.value, 'unit': to_parts.num ~ '/' ~ to_parts.den} | tojson -}}
            {%- endif -%}
        {%- else -%}
            {{- {'value': num.value, 'unit': to_parts.num} | tojson -}}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{#- Returns dict: {"value": float, "unit": str} -#}
{% macro u_convert(value, from_unit, to_unit) %}
    {%- set fu = normalize_unit(from_unit|string) -%}
    {%- set tu = normalize_unit(to_unit|string) -%}
    {%- if fu == tu -%}
        {{- {'value': value|float, 'unit': tu} | tojson -}}
    {%- else -%}
        {%- set fp = split_compound_unit(fu) | from_json -%}
        {%- set tp = split_compound_unit(tu) | from_json -%}
        {%- if fp.den or tp.den -%}
            {{- convert_rate(value, fp, tp) -}}
        {%- else -%}
            {{- convert_scalar(value, fu, tu) -}}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{#- Returns number only -#}
{% macro u_convert_value(value, from_unit, to_unit) %}
    {%- set r = u_convert(value, from_unit, to_unit) | from_json -%}
    {%- if r.error is defined -%}
        {{- none -}}
    {%- else -%}
        {{- r.value -}}
    {%- endif -%}
{% endmacro %}

{#- Returns number only given an entity ID -#}
{% macro u_convert_entity(eid, to_unit) %}
    {{- u_convert_value(states(eid) , state_attr(eid,'unit_of_measurement'), to_unit) -}}
{% endmacro %}

{# ============================================================================
 # Humanization (SI/IEC prefixes via prefix_scaling, no prefixes for time/non-SI,
 # and timedelta formatting for durations). Keeps sig-digit behavior close to
 # your original humanize_unit but removes duplication.
 # ============================================================================ #}

{# djlint:off #}
{# Allow-list of base units that may be prefixed; never prefix time. #}
{% set PREFIXABLE = ["m", "g", "W", "J", "Pa", "B", "bit", "lx", "L", "m³", "Wh",
    "bit/s", "B/s"
] %}

{# Block-list for common non-SI/US-customary units where prefixes are undesirable. #}
{% set NON_PREFIXABLE = ["s", "ms", "min", "h", "d", "gal", "qt", "pt", "cup", "floz",
    "fl oz", "in", "ft", "yd", "mi", "nmi", "psi", "°C", "°F", "K",
] %}
{# djlint:on #}

{# Significant-digits rule. #}
{% macro sig_format(v) -%}
    {%- set x = v|float(0) -%}
    {%- if x == 0 -%}
        0
    {%- else -%}
        {%- set ax = (0 - x) if x < 0 else x -%}
        {%- set sci = '%e'|format(ax) -%}
        {%- set parts = sci.split('e') -%}
        {%- set mant = parts[0] -%}
        {%- set exp = parts[1]|int -%}
        {%- set leading = mant.split('.')[0]|int -%}
        {%- set sig = 4 if leading == 1 else 3 -%}
        {%- set decimals = sig - 1 - exp -%}
        {%- set r = x|round(decimals) -%}
        {%- set p = decimals if decimals > 0 else 0 -%}
        {%- set s = "{:,.{}f}".format((0 - r) if r < 0 else r, p) -%}
        {%- set s = s|regex_replace('0+$','')|regex_replace('\.$','') if '.' in s else s -%}
        {{- '-' ~ s if r < 0 else s -}}
    {%- endif -%}
{%- endmacro %}

{# Render time using Python timedelta, never "ksec". #}
{% macro u_humanize_duration(value, unit) -%}
    {%- set basev = to_base_value(value, unit) | from_json -%}
    {%- if basev.error is defined -%}
        {{- value ~ ' ' ~ unit -}}
    {%- else -%}
        {%- set s = basev.value|float -%}
        {%- set sign = '-' if s < 0 else '' -%}
        {%- set a = (0 - s) if s < 0 else s -%}
        {%- if a >= 1 -%}
            {{- sign ~ (timedelta(seconds=(a|round(0) |int))|string) -}}
        {%- elif a >= 0.001 -%}
            {{- sign ~ ((a*1000)|round(0) |int) ~ ' ms' -}}
        {%- else -%}
            {{- sign ~ ((a*1000000)|round(0) |int) ~ ' µs' -}}
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}

{# Humanize a number with unit; auto SI/IEC prefixes via prefix_scaling. #}
{% macro u_humanize_value(n, unit='', system='') %}
    {%- if not unit or unit | trim == '' -%}
        {{- sig_format(n|float(0) ) -}}
    {%- else -%}
        {%- set sgn = -1 if (n | float(0)) < 0 else 1 -%}
        {%- set raw_unit = unit | string | trim -%}
        {%- set ns = namespace(v=n|float(0)|abs, pref_out='', pref_chain=none, base_unit=raw_unit, sys=(system or '')|lower) -%}

        {#- Normalize, split any prefix using canonical helper -#}
        {%- set norm_u = normalize_unit(raw_unit) -%}
        {%- set sp = split_prefix_unit(norm_u) | from_json -%}

        {%- set dim = get_dimension(sp.base) -%}
        {%- set is_time = (dim == 'time') -%}
        {%- set can_pref = (sp.base in PREFIXABLE) and (sp.base not in NON_PREFIXABLE) and (not is_time) -%}

        {#- Choose system: default IEC for bytes prefixed with IEC or explicit B and no SI hint, else SI -#}
        {%- if ns.sys not in ['si','iec'] -%}
            {%- set ns.sys = ('iec' if (sp.prefix|string).endswith('i') or sp.base == 'B' else 'si') -%}
        {%- endif -%}

        {#- Time: use timedelta and stop here -#}
        {%- if is_time -%}
            {{- u_humanize_duration(n, norm_u) -}}
        {%- else -%}
            {#- If the input carried a prefix, normalize value to base using scale_value -#}
            {%- if sp.prefix and can_pref -%}
                {%- set sys_tag = ('IEC' if ns.sys == 'iec' else 'SI') -%}
                {%- set ns.v = scale_value(ns.v, sp.prefix, '', sys_tag) | float -%}
            {%- endif -%}

            {#- Decide output prefix using autoscale_prefix -#}
            {%- if can_pref -%}
                {%- set sys_tag = ('IEC' if ns.sys == 'iec' else 'SI') -%}
                {%- set scaled = autoscale_prefix(ns.v, sys_tag) | from_json -%}
                {%- set ns.v = scaled.value | float -%}
                {%- set ns.pref_out = scaled.prefix -%}
            {%- endif -%}

            {%- set out = sig_format(ns.v) -%}
            {%- set sign_str = '-' if sgn == -1 and ns.v != 0 else '' -%}
            {{- sign_str ~ out ~ ' ' ~ (ns.pref_out if can_pref else '') ~ sp.base -}}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{% macro u_humanize_entity(entity_id) -%}
    {{- u_humanize_value(states(entity_id), state_attr(entity_id, 'unit_of_measurement')) -}}
{%- endmacro %}
