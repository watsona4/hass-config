{# # File: config/custom_templates/ssd_wear_tbw.jinja ## #}
{# Macros for SSD Wear / Endurance (TBW) and Health:
   - Inputs:
       • TBW written (host/NAND) with unit (TB/TiB/GB/etc)
       • Rated TBW (vendor endurance) or DWPD + years + capacity
       • Optional NVMe SMART counters (Data Units Written)
   - Outputs:
       • % endurance used / remaining health
       • Categories, icons, colors, labels, bars, advice
       • DWPD calculator, projections (days left), and convenience helpers
#}

{% from 'helpers.jinja' import level_find %}

{# -------------------- Buckets (lower bounds) in % endurance USED -------------------- #}
{# 0–10 Low, 10–25 Light, 25–50 Moderate, 50–75 High, 75–90 Very High, 90–100 Near End, >=100 Exceeded #}
{% set bps_used_pct = [0, 10, 25, 50, 75, 90, 100] %}

{% set names = [
  "Low Wear",
  "Light Wear",
  "Moderate Wear",
  "High Wear",
  "Very High Wear",
  "Near End",
  "Endurance Exceeded"
] %}

{% set shorts = [
  "Low",
  "Light",
  "Moder",
  "High",
  "V High",
  "Near",
  "Exceeded"
] %}

{% set longs = [
  "SSD Wear: Low",
  "SSD Wear: Light",
  "SSD Wear: Moderate",
  "SSD Wear: High",
  "SSD Wear: Very High",
  "SSD Wear: Near End of Life",
  "SSD Wear: Endurance Exceeded"
] %}

{% set icons = [
  "mdi:harddisk-ssd",         # Low
  "mdi:harddisk-ssd",         # Light
  "mdi:harddisk-ssd",         # Moderate
  "mdi:harddisk-ssd",         # High
  "mdi:harddisk-ssd",         # Very High
  "mdi:alert",                # Near End
  "mdi:alert-decagram"        # Exceeded
] %}

{% set colors = [
  "#22c55e",  # Low
  "#84cc16",  # Light
  "#eab308",  # Moderate
  "#f59e0b",  # High
  "#f97316",  # Very High
  "#ef4444",  # Near End
  "#7c3aed",  # Exceeded
  "disabled"
] %}

{% set descriptions = [
  "Plenty of endurance remaining.",
  "Light cumulative writes; health is strong.",
  "Moderate wear; normal for regular use.",
  "High wear; keep an eye on health.",
  "Very high wear; plan for replacement.",
  "Near rated end of life; replace soon and keep backups.",
  "Endurance rating exceeded; failure risk increases—replace now."
] %}

{# -------------------- Unit conversion helpers (bytes / decimal & binary TB) -------------------- #}
{# Accepts: B, KB/KiB, MB/MiB, GB/GiB, TB/TiB, PB/PiB #}
{% macro to_bytes(value, unit='TB') -%}
  {%- set v = (value|float if value is not none else 0.0) -%}
  {%- set u = (unit|string|lower) -%}
  {%- if u in ['b','byte','bytes'] -%}{% set m = 1 %}
  {%- elif u in ['kb','kilobyte','kilobytes'] -%}{% set m = 1000 %}
  {%- elif u in ['kib','kibibyte','kibibytes'] -%}{% set m = 1024 %}
  {%- elif u in ['mb','megabyte','megabytes'] -%}{% set m = 1000**2 %}
  {%- elif u in ['mib','mebibyte','mebibytes'] -%}{% set m = 1024**2 %}
  {%- elif u in ['gb','gigabyte','gigabytes'] -%}{% set m = 1000**3 %}
  {%- elif u in ['gib','gibibyte','gibibytes'] -%}{% set m = 1024**3 %}
  {%- elif u in ['tb','terabyte','terabytes'] -%}{% set m = 1000**4 %}
  {%- elif u in ['tib','tebibyte','tebibytes'] -%}{% set m = 1024**4 %}
  {%- elif u in ['pb','petabyte','petabytes'] -%}{% set m = 1000**5 %}
  {%- elif u in ['pib','pebibyte','pebibytes'] -%}{% set m = 1024**5 %}
  {%- else -%}{% set m = 1000**4 %}{% endif -%} {# default TB #}
  {{ v * m }}
{%- endmacro %}

{% macro bytes_to(value_bytes, to_unit='TB') -%}
  {%- set b = (value_bytes|float if value_bytes is not none else 0.0) -%}
  {%- set u = (to_unit|string|lower) -%}
  {%- if u in ['b','byte','bytes'] -%}{% set d = 1 %}
  {%- elif u in ['kb'] -%}{% set d = 1000 %}
  {%- elif u in ['kib'] -%}{% set d = 1024 %}
  {%- elif u in ['mb'] -%}{% set d = 1000**2 %}
  {%- elif u in ['mib'] -%}{% set d = 1024**2 %}
  {%- elif u in ['gb'] -%}{% set d = 1000**3 %}
  {%- elif u in ['gib'] -%}{% set d = 1024**3 %}
  {%- elif u in ['tb'] -%}{% set d = 1000**4 %}
  {%- elif u in ['tib'] -%}{% set d = 1024**4 %}
  {%- elif u in ['pb'] -%}{% set d = 1000**5 %}
  {%- elif u in ['pib'] -%}{% set d = 1024**5 %}
  {%- else -%}{% set d = 1000**4 %}{% endif -%}
  {{ b / d }}
{%- endmacro %}

{% macro format_bytes(b) -%}
  {%- set x = b|float -%}
  {%- if x >= 1000**5 -%}{{ (x / 1000**5)|round(2) }} PB
  {%- elif x >= 1000**4 -%}{{ (x / 1000**4)|round(2) }} TB
  {%- elif x >= 1000**3 -%}{{ (x / 1000**3)|round(2) }} GB
  {%- elif x >= 1000**2 -%}{{ (x / 1000**2)|round(2) }} MB
  {%- elif x >= 1000 -%}{{ (x / 1000)|round(2) }} KB
  {%- else -%}{{ x|round(0) }} B
  {%- endif -%}
{%- endmacro %}

{# NVMe SMART "Data Units Written" → bytes (each unit = 512,000 bytes) #}
{% macro nvme_data_units_to_bytes(units) -%}
  {{ (units|float) * 512000.0 }}
{%- endmacro %}

{# Optional generic LBA counter → bytes (default 512 B sectors) #}
{% macro lba_to_bytes(lba_count, lba_size=512) -%}
  {{ (lba_count|float) * (lba_size|float) }}
{%- endmacro %}

{# -------------------- Percent endurance used & health -------------------- #}
{% macro used_pct_from_tbw(tbw_written, rated_tbw, unit='TB') -%}
  {%- set W = to_bytes(tbw_written, unit)|float -%}
  {%- set R = to_bytes(rated_tbw, unit)|float -%}
  {%- set p = (W / (R if R>0 else 1e-9)) * 100.0 -%}
  {{ 0 if p < 0 else (1000 if p > 1000 else p) }}
{%- endmacro %}

{# NVMe "percentage used" already represents % used (0..100+). #}
{% macro used_pct_from_nvme_percentage(percentage_used) -%}
  {{ 0 if (percentage_used|float) < 0 else (1000 if (percentage_used|float) > 1000 else (percentage_used|float)) }}
{%- endmacro %}

{% macro health_pct_from_used(used_pct) -%}
  {%- set u = used_pct|float -%}
  {{ 0 if u >= 100 else (100 - u) }}
{%- endmacro %}

{# -------------------- Core level & lookups (by % USED) -------------------- #}
{% macro level(pct_used) -%}
  {{ level_find((pct_used|float), bps_used_pct) }}
{%- endmacro %}

{# djlint:off #}
{% macro name(pct_used) %}{{ names[level(pct_used)|int - 1] }}{% endmacro %}
{% macro short(pct_used) %}{{ shorts[level(pct_used)|int - 1] }}{% endmacro %}
{% macro long(pct_used) %}{{ longs[level(pct_used)|int - 1] }}{% endmacro %}
{% macro icon(pct_used) %}{{ icons[level(pct_used)|int - 1] }}{% endmacro %}
{% macro color(pct_used) %}{{ colors[level(pct_used)|int - 1] }}{% endmacro %}
{% macro desc(pct_used) %}{{ descriptions[level(pct_used)|int - 1] }}{% endmacro %}
{# djlint:on #}

{# Bars 0..4 from % USED (inverse of health for visuals) #}
{% macro bars(pct_used) -%}
  {%- set p = pct_used|float -%}
  {%- if p < 10 -%}0
  {%- elif p < 35 -%}1
  {%- elif p < 60 -%}2
  {%- elif p < 85 -%}3
  {%- else -%}4
  {%- endif -%}
{%- endmacro %}

{# -------------------- Labels -------------------- #}
{# Example: "High • 62% used • Health 38% • 76.5 TB / 123 TBW" #}
{% macro label_from_tbw(tbw_written, rated_tbw, unit='TB') -%}
  {%- set p = used_pct_from_tbw(tbw_written, rated_tbw, unit)|float -%}
  {%- set health = health_pct_from_used(p)|float -%}
  {{ name(p) }} • {{ p|round(0) }}% used • Health {{ health|round(0) }}% • {{ tbw_written|round(2) }} {{ unit }} / {{ rated_tbw|round(2) }} {{ unit }} TBW
{%- endmacro %}

{# Example: "Near End • 94% used • Health 6% • 180.2 TB written" #}
{% macro label_from_used_pct(used_pct, tbw_written=None, unit='TB') -%}
  {%- set p = used_pct|float -%}
  {%- set health = health_pct_from_used(p)|float -%}
  {{ name(p) }} • {{ p|round(0) }}% used • Health {{ health|round(0) }}%{{ ' • ' ~ (tbw_written|round(2)) ~ ' ' ~ unit ~ ' written' if tbw_written is not none else '' }}
{%- endmacro %}

{# Compact chip: "Health 83% • 22% used" #}
{% macro chip(used_pct) -%}
  {%- set p = used_pct|float -%}
  Health {{ health_pct_from_used(p)|round(0) }}% • {{ p|round(0) }}% used
{%- endmacro %}

{# -------------------- DWPD / Warranty math -------------------- #}
{# rated_tbw from DWPD: TBW = DWPD * capacity * 365 * years #}
{% macro tbw_from_dwpd(dwpd, capacity, years, cap_unit='TB', out_unit='TB') -%}
  {%- set cap_bytes = to_bytes(capacity, cap_unit)|float -%}
  {%- set tbw_bytes = (dwpd|float) * cap_bytes * 365.0 * (years|float) -%}
  {{ bytes_to(tbw_bytes, out_unit) }}
{%- endmacro %}

{% macro dwpd_from_tbw(rated_tbw, capacity, years, tbw_unit='TB', cap_unit='TB') -%}
  {%- set tbw_b = to_bytes(rated_tbw, tbw_unit)|float -%}
  {%- set cap_b = to_bytes(capacity, cap_unit)|float -%}
  {{ (tbw_b / (cap_b * 365.0 * (years|float if years else 1.0))) if cap_b>0 else 0 }}
{%- endmacro %}

{# Convenience label: "Endurance: 300 TBW (~0.33 DWPD for 512 GB over 5y)" #}
{% macro endurance_label(rated_tbw, capacity, years, tbw_unit='TB', cap_unit='GB') -%}
  {%- set d = dwpd_from_tbw(rated_tbw, capacity, years, tbw_unit, cap_unit)|float -%}
  Endurance: {{ rated_tbw }} {{ tbw_unit }} (≈ {{ d|round(2) }} DWPD over {{ years }}y @ {{ capacity }} {{ cap_unit }})
{%- endmacro %}

{# -------------------- Projections & thresholds -------------------- #}
{% macro remaining_tbw(tbw_written, rated_tbw, unit='TB') -%}
  {%- set R = to_bytes(rated_tbw, unit)|float -%}
  {%- set W = to_bytes(tbw_written, unit)|float -%}
  {{ bytes_to((R - W), unit) }}
{%- endmacro %}

{# Estimate days left at current average writes/day (in same unit as 'unit') #}
{% macro days_left(tbw_written, rated_tbw, daily_writes, unit='TB') -%}
  {%- set rem = remaining_tbw(tbw_written, rated_tbw, unit)|float -%}
  {%- set d = daily_writes|float -%}
  {{ (rem / d) if d > 0 else 0 }}
{%- endmacro %}

{% macro projection_label(tbw_written, rated_tbw, daily_writes, unit='TB') -%}
  {%- set d = days_left(tbw_written, rated_tbw, daily_writes, unit)|float -%}
  {%- if d <= 0 -%}
    No write rate provided.
  {%- elif d < 1 -%}
    ~{{ (d*24)|round(0) }}h to rated TBW at current write rate
  {%- else -%}
    ~{{ d|round(1) }} days to rated TBW at current write rate
  {%- endif -%}
{%- endmacro %}

{# -------------------- Guidance & booleans -------------------- #}
{% macro is_near_end(pct_used) -%}{{ level(pct_used)|int >= 6 }}{%- endmacro %}
{% macro is_exceeded(pct_used) -%}{{ level(pct_used)|int >= 7 }}{%- endmacro %}

{% macro advice(pct_used) -%}
  {%- set L = level(pct_used)|int -%}
  {%- if L <= 3 -%}
    Endurance is healthy—no action needed.
  {%- elif L == 4 -%}
    Wear is high—monitor SMART data periodically.
  {%- elif L == 5 -%}
    Very high wear—plan a replacement window and ensure backups are current.
  {%- elif L == 6 -%}
    Near end of life—replace the drive soon; keep verified backups.
  {%- else -%}
    Endurance exceeded—replace immediately and clone data if possible.
  {%- endif -%}
{%- endmacro %}

{# -------------------- NVMe convenience wrappers -------------------- #}
{# From NVMe "Data Units Written" and rated TBW produce a full label. #}
{% macro nvme_label_from_units(units_written, rated_tbw, out_unit='TB') -%}
  {%- set written_b = nvme_data_units_to_bytes(units_written)|float -%}
  {%- set written_u = bytes_to(written_b, out_unit)|float -%}
  {{ label_from_tbw(written_u, rated_tbw, out_unit) }}
{%- endmacro %}

{# From NVMe "percentage used" (0..100+) #}
{% macro nvme_label_from_pct(percentage_used, tbw_written=None, unit='TB') -%}
  {{ label_from_used_pct(percentage_used, tbw_written, unit) }}
{%- endmacro %}

{# -------------------- Multi-drive helpers -------------------- #}
{% macro max_used_pct(pcts) -%}
  {%- set m = 0 -%}
  {%- for p in pcts -%}{% set x = (p|float) %}{% set m = x if x > m else m %}{%- endfor -%}
  {{ m }}
{%- endmacro %}

{% macro fleet_label(drives_names, pcts_used) -%}
  {%- set worst = max_used_pct(pcts_used)|float -%}
  Fleet • Worst {{ worst|round(0) }}% used • {{ names[level(worst)|int - 1] }}
{%- endmacro %}
