{# Device class wrapper template for automatic template selection based on entity device class #}

{% macro get_device_state_info(entity_id, options={}) %}
    {# Get the entity's device class if it exists, otherwise use 'none' #}
    {% set device_class = state_attr(entity_id, 'device_class') or 'none' %}
    
    {# Get the current state value #}
    {% set value = states(entity_id) | float(0) %}
    
    {# Import the appropriate template based on device class #}
    {% set valid_classes = [
        'acceleration', 'angle', 'aqi', 'apparent_power', 'atmospheric_pressure',
        'battery', 'carbon_dioxide', 'carbon_monoxide', 'cloud_coverage',
        'conductivity', 'current', 'data_rate', 'data_size', 'distance',
        'duration', 'energy', 'frequency', 'gas', 'heat_index', 'humidity',
        'illuminance', 'irradiance', 'latency', 'lightning', 'moisture',
        'monetary', 'nitrogen_dioxide', 'none', 'ozone', 'packet_loss',
        'percentage', 'ph', 'pm10', 'pm25', 'power', 'precipitation',
        'precipitation_intensity', 'pressure', 'radiation', 'salinity',
        'signal_strength', 'snow_depth', 'soil_nutrient', 'solar_radiation',
        'sound_level', 'speed', 'sulphur_dioxide', 'temperature', 'timestamp',
        'uptime', 'uv', 'vibration', 'volatile_organic_compounds', 'voltage',
        'volume', 'volume_flow_rate', 'water', 'weight', 'wind_speed'
    ] %}

    {# Ensure we have a valid device class, fallback to 'none' if not #}
    {% if device_class not in valid_classes %}
        {% set device_class = 'none' %}
    {% endif %}

    {# Import the specific device class template #}
    {% from 'device_class/' ~ device_class ~ '.jinja' import bps, names, descriptions,
           health_impacts, actions_needed, icons, colors %}

    {# Find the appropriate level based on the value #}
    {% set level = 1 %}
    {% for bp in bps %}
        {% if value >= bp %}
            {% break %}
        {% endif %}
        {% set level = level + 1 %}
    {% endfor %}
    
    {# Adjust level to be 0-based index #}
    {% set idx = level - 1 %}

    {# Return a dictionary with all the relevant information #}
    {
        'value': value,
        'device_class': device_class,
        'level': level,
        'name': names[idx],
        'description': descriptions[idx],
        'health_impact': health_impacts[idx],
        'action_needed': actions_needed[idx],
        'icon': icons[idx],
        'color': colors[idx],
        'raw_options': options
    }
{% endmacro %}

{# Helper macro to get specific attribute #}
{% macro get_attribute(entity_id, attribute, options={}) %}
    {% set info = get_device_state_info(entity_id, options) %}
    {{ info[attribute] }}
{% endmacro %}

{# Convenience macros for common attributes #}
{% macro get_name(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'name', options) }}
{% endmacro %}

{% macro get_description(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'description', options) }}
{% endmacro %}

{% macro get_health_impact(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'health_impact', options) }}
{% endmacro %}

{% macro get_action_needed(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'action_needed', options) }}
{% endmacro %}

{% macro get_icon(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'icon', options) }}
{% endmacro %}

{% macro get_color(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'color', options) }}
{% endmacro %}

{% macro get_level(entity_id, options={}) %}
    {{ get_attribute(entity_id, 'level', options) }}
{% endmacro %}

{# Example usage:
   {% from 'device_class_wrapper.jinja' import get_device_state_info %}
   {% set info = get_device_state_info('sensor.temperature') %}
   {{ info.description }}
   
   Or using convenience macros:
   {% from 'device_class_wrapper.jinja' import get_description %}
   {{ get_description('sensor.temperature') }}
#}
