{# ===============================================================
   Pollen (Google Pollen API) helpers
   - build_ctx(entity_id): returns {di, d, plants, pick, days}
   - best_species(d): choose species with highest value (fallback to a species with a picture)
   - summarize_days(di, n=3): first n days summary with dominant type & a “spotlight” species
   =============================================================== #}

{# ---- Helpers ---- #}
{% macro _hex_from_rgb01(col) %}
    {%- set r = ((col.get('red')   or 0) * 255) | round(0) | int -%}
    {%- set g = ((col.get('green') or 0) * 255) | round(0) | int -%}
    {%- set b = ((col.get('blue')  or 0) * 255) | round(0) | int -%}
    {{- '#%02X%02X%02X'|format(r, g, b) -}}
{% endmacro %}

{% macro _safe_date(dt) %}
    {%- if dt -%}
        {{- "%04d-%02d-%02d" | format(dt.get('year',0) , dt.get('month',0), dt.get('day',0)) -}}
    {%- else -%}
        {{- none -}}
    {%- endif -%}
{% endmacro %}

{# ---- Choose a “best” species from a day object ---- #}
{% macro best_species(d) -%}
    {%- set plants = d.get('plantInfo') or [] -%}
    {%- set best = namespace(p=None, v=-1) -%}
    {%- for p in plants -%}
        {%- set v = (p.get('indexInfo') or {}).get('value') -%}
        {%- if v is not none and v > best.v -%}
            {%- set best.p = p -%}
            {%- set best.v = v -%}
        {%- endif -%}
    {%- endfor -%}
    {%- if best.p is none -%}
        {%- for p in plants -%}
            {%- set desc = p.get('plantDescription') or {} -%}
            {%- if desc.get('picture') or desc.get('pictureCloseup') -%}
                {%- set best.p = p -%}
                {%- break -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
    {%- set p = best.p or (plants | first) or {} -%}
    {%- set desc = p.get('plantDescription') or {} -%}
    {%- set ii = p.get('indexInfo') or {} -%}
    {{- {
        'name': p.get("displayName") or p.get('code'),
        'code': p.get('code'),
        'type': desc.get('type'),
        'in_season': p.get('inSeason'),
        'value': ii.get('value'),
        'category': ii.get('category'),
        'picture': desc.get('picture') or desc.get('pictureCloseup')
    } | tojson -}}
{%- endmacro %}

{# ---- Summarize first n days for forecast tiles ---- #}
{% macro summarize_days(di, n=3) -%}
    {%- set out = namespace(items=[]) -%}
    {%- for d in di[:n] -%}
        {%- set types = d.get('pollenTypeInfo') or [] -%}
        {%- set best = namespace(t=None, v=-1) -%}
        {%- for t in types -%}
            {%- set ii = t.get('indexInfo') or {} -%}
            {%- set v = ii.get('value') -%}
            {%- if v is not none and v > best.v -%}
                {%- set best.t = t -%}
                {%- set best.v = v -%}
            {%- endif -%}
        {%- endfor -%}
        {%- set top = best.t or {} -%}
        {%- set ii = top.get('indexInfo') or {} -%}
        {%- set col = ii.get('color') or {} -%}
        {%- set hex = _hex_from_rgb01(col) -%}
        {%- set sp = best_species(d) | from_json -%}
        {%- set dt = d.get('date') or {} -%}
        {%- set item = {
            'exists': true,
            'date': _safe_date(dt),
            'state': ii.get('category') or 'unknown',
            'dominant_type': top.get('displayName') or top.get('code'),
            'dominant_value': ii.get('value'),
            'dominant_category': ii.get('category'),
            'dominant_hex': hex,
            'species_name': sp.get('name'),
            'species_value': sp.get('value'),
            'species_category': sp.get('category'),
            'species_type': sp.get('type'),
            'species_picture': sp.get('picture')
        } -%}
        {%- set out.items = out.items + [item] -%}
    {%- endfor -%}
    {{- out.items | tojson -}}
{%- endmacro %}

{# ---- Build full context for a source entity ---- #}
{% macro build_ctx(src) -%}
    {%- set di = state_attr(src, 'dailyInfo') | default([], true) -%}
    {%- set d = (di | first) | default({}, true) -%}
    {{- {
        'di': di,
        'd':  d,
        'plants': d.get("plantInfo") or [],
        'pick': best_species(d) | from_json,
        'days': summarize_days(di, 3) | from_json
    } | tojson -}}
{%- endmacro %}
