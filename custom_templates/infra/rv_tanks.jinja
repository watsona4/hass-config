{# # File: config/custom_templates/rv_tanks.jinja ## #}
{# Macros for RV tank levels: Fresh Water, Gray Water, Black Water, and Propane (LP).
   Includes names, icons, colors, labels, and time-to-empty/full helpers.
   Defaults:
     - Percent inputs are 0..100 (% filled).
     - Volume unit: US gallons ('gal'). Supported: 'gal', 'l', 'm3'.
     - Flow unit: gallons per minute ('gpm') or liters per minute ('lpm') for rate helpers.
#}

{% from 'helpers.jinja' import level_find %}

{# -------------------- General helpers -------------------- #}

{# Convert volume between gal, L, m3. Default in/out: gal. #}
{% macro convert_volume_value(value, from_unit='gal', to_unit='gal') -%}
  {%- set v = value|float -%}
  {%- set fu = (from_unit|string|lower) -%}
  {%- set tu = (to_unit|string|lower) -%}

  {%- if fu in ['gallon','gallons','gal'] -%}{% set fu = 'gal' %}{% endif -%}
  {%- if fu in ['l','liter','liters','litre','litres'] -%}{% set fu = 'l' %}{% endif -%}
  {%- if fu in ['m3','m^3','m³','cubic_meter','cubic_metres'] -%}{% set fu = 'm3' %}{% endif -%}

  {%- if tu in ['gallon','gallons','gal'] -%}{% set tu = 'gal' %}{% endif -%}
  {%- if tu in ['l','liter','liters','litre','litres'] -%}{% set tu = 'l' %}{% endif -%}
  {%- if tu in ['m3','m^3','m³','cubic_meter','cubic_metres'] -%}{% set tu = 'm3' %}{% endif -%}

  {# to gal #}
  {%- if fu == 'l' -%}
    {%- set gal = v / 3.785411784 -%}
  {%- elif fu == 'm3' -%}
    {%- set gal = v * 264.1720524 -%}
  {%- else -%}
    {%- set gal = v -%}
  {%- endif -%}

  {# from gal #}
  {%- if tu == 'l' -%}
    {{ gal * 3.785411784 }}
  {%- elif tu == 'm3' -%}
    {{ gal / 264.1720524 }}
  {%- else -%}
    {{ gal }}
  {%- endif -%}
{%- endmacro %}

{# Compute % filled from a current volume and capacity. #}
{% macro pct_from_volume(current, capacity, unit='gal') -%}
  {%- set cur = convert_volume_value(current, unit, 'gal')|float -%}
  {%- set cap = convert_volume_value(capacity, unit, 'gal')|float -%}
  {%- set pct = (cur / (cap if cap > 0 else 1e-9)) * 100.0 -%}
  {{ 0 if pct < 0 else (100 if pct > 100 else pct) }}
{%- endmacro %}

{# Map coarse sensor LEDs to a % estimate. 
   Example: segments=4 for 0/25/50/75/100; segments=3 for E / 1/3 / 2/3 / F. 
   If use_midpoints=true, returns midpoints (e.g., 12.5, 37.5, ...). #}
{% macro estimate_pct_from_sensor(lit_segments, segments=4, use_midpoints=true) -%}
  {%- set n = (segments|int if segments else 4) -%}
  {%- set k = (lit_segments|int if lit_segments else 0) -%}
  {%- set k = 0 if k < 0 else (n if k > n else k) -%}
  {%- if use_midpoints -%}
    {{ (100.0 / n) * (k - 0.5) if k > 0 else 0.0 }}
  {%- else -%}
    {{ (100.0 / n) * k }}
  {%- endif -%}
{%- endmacro %}

{# -------------------- Fresh Water -------------------- #}

{# Breakpoints by % filled (lower bounds) #}
{% set bps_fresh = [0, 5, 20, 40, 60, 80, 95] %}

{% set fresh_names = ["Empty", "Very Low", "Low", "Mid", "High", "Very High", "Full"] %}
{% set fresh_shorts = ["Empty", "V Low", "Low", "Mid", "High", "V High", "Full"] %}
{% set fresh_longs = [
  "Fresh Water: Empty",
  "Fresh Water: Very Low",
  "Fresh Water: Low",
  "Fresh Water: Mid",
  "Fresh Water: High",
  "Fresh Water: Very High",
  "Fresh Water: Full"
] %}
{% set fresh_icons = [
  "mdi:water-off",
  "mdi:water-outline",
  "mdi:water",
  "mdi:water",
  "mdi:water-check",
  "mdi:water-plus",
  "mdi:water-check"
] %}
{% set fresh_colors = [
  "#ef4444", "#f97316", "#f59e0b", "#eab308", "#84cc16", "#22c55e", "#10b981", "disabled"
] %}
{% set fresh_desc = [
  "No potable water available—refill immediately.",
  "Critical level; plan refill now.",
  "Low; conserve water.",
  "Around halfway.",
  "Comfortable level.",
  "Plenty of water available.",
  "Tank full."
] %}

{% macro fresh_level(pct) -%}
  {{ level_find((pct|float), bps_fresh) }}
{%- endmacro %}

{# djlint:off #}
{% macro fresh_name(pct) %}{{ fresh_names[fresh_level(pct)|int - 1] }}{% endmacro %}
{% macro fresh_short(pct) %}{{ fresh_shorts[fresh_level(pct)|int - 1] }}{% endmacro %}
{% macro fresh_long(pct) %}{{ fresh_longs[fresh_level(pct)|int - 1] }}{% endmacro %}
{% macro fresh_icon(pct) %}{{ fresh_icons[fresh_level(pct)|int - 1] }}{% endmacro %}
{% macro fresh_color(pct) %}{{ fresh_colors[fresh_level(pct)|int - 1] }}{% endmacro %}
{% macro fresh_desc_text(pct) %}{{ fresh_desc[fresh_level(pct)|int - 1] }}{% endmacro %}
{# djlint:on #}

{% macro fresh_label_pct(pct, capacity=0, unit='gal') -%}
  {%- set cap_gal = convert_volume_value(capacity, unit, 'gal')|float -%}
  {%- set cur_gal = (pct|float / 100.0) * cap_gal -%}
  {%- set cur_l = convert_volume_value(cur_gal, 'gal', 'l')|float -%}
  {{ fresh_name(pct) }} • {{ pct|round(0) }}%{{ ' • ' ~ cur_gal|round(1) ~ ' gal (' ~ cur_l|round(0) ~ ' L)' if cap_gal > 0 else '' }}
{%- endmacro %}

{% macro fresh_label_vol(current, capacity, unit='gal') -%}
  {%- set pct = pct_from_volume(current, capacity, unit)|float -%}
  {{ fresh_label_pct(pct, capacity, unit) }}
{%- endmacro %}

{# Time to empty given outflow rate (gpm/lpm). Returns hours. #}
{% macro fresh_hours_left(pct, capacity, outflow_rate, cap_unit='gal', flow_unit='gpm') -%}
  {%- set cap_gal = convert_volume_value(capacity, cap_unit, 'gal')|float -%}
  {%- set rem_gal = (pct|float / 100.0) * cap_gal -%}
  {%- set gpm = (outflow_rate|float) if (flow_unit|string|lower) in ['gpm','gal/min'] else ((outflow_rate|float) / 3.785411784) -%}
  {{ (rem_gal / (gpm if gpm > 0 else 1e-9)) }}
{%- endmacro %}

{% macro fresh_days_left_daily(pct, capacity, daily_use_gal, cap_unit='gal') -%}
  {%- set cap_gal = convert_volume_value(capacity, cap_unit, 'gal')|float -%}
  {%- set rem_gal = (pct|float / 100.0) * cap_gal -%}
  {{ rem_gal / (daily_use_gal|float if daily_use_gal|float > 0 else 1e-9) }}
{%- endmacro %}

{% macro fresh_low(pct) -%}{{ (pct|float) <= 20.0 }}{%- endmacro %}
{% macro fresh_critical(pct) -%}{{ (pct|float) <= 5.0 }}{%- endmacro %}

{# -------------------- Gray Water -------------------- #}

{% set bps_waste = [0, 10, 25, 50, 75, 85, 95] %}

{% set gray_names = ["Empty", "Low", "Quarter", "Half", "Three-Quarter", "Near Full", "Full"] %}
{% set gray_shorts = ["Empty", "Low", "¼", "½", "¾", "Near", "Full"] %}
{% set gray_longs = [
  "Gray Water: Empty",
  "Gray Water: Low",
  "Gray Water: Quarter",
  "Gray Water: Half",
  "Gray Water: Three-Quarter",
  "Gray Water: Near Full",
  "Gray Water: Full"
] %}
{% set gray_icons = [
  "mdi:shower",
  "mdi:shower",
  "mdi:shower",
  "mdi:shower",
  "mdi:shower",
  "mdi:water-alert",
  "mdi:pipe-leak"
] %}
{% set waste_colors_inv = [
  "#10b981", "#84cc16", "#a3e635", "#eab308", "#f59e0b", "#ef4444", "#7c3aed", "disabled"
] %}
{% set gray_desc = [
  "Tank empty; normal operation.",
  "Low level.",
  "About a quarter full.",
  "About half full.",
  "About three-quarters full.",
  "Nearly full; plan to dump soon.",
  "Full; drain immediately to avoid backups."
] %}

{% macro gray_level(pct) -%}
  {{ level_find((pct|float), bps_waste) }}
{%- endmacro %}

{# djlint:off #}
{% macro gray_name(pct) %}{{ gray_names[gray_level(pct)|int - 1] }}{% endmacro %}
{% macro gray_short(pct) %}{{ gray_shorts[gray_level(pct)|int - 1] }}{% endmacro %}
{% macro gray_long(pct) %}{{ gray_longs[gray_level(pct)|int - 1] }}{% endmacro %}
{% macro gray_icon(pct) %}{{ gray_icons[gray_level(pct)|int - 1] }}{% endmacro %}
{% macro gray_color(pct) %}{{ waste_colors_inv[gray_level(pct)|int - 1] }}{% endmacro %}
{% macro gray_desc_text(pct) %}{{ gray_desc[gray_level(pct)|int - 1] }}{% endmacro %}
{# djlint:on #}

{% macro gray_label_pct(pct, capacity=0, unit='gal') -%}
  {%- set cap_gal = convert_volume_value(capacity, unit, 'gal')|float -%}
  {%- set cur_gal = (pct|float / 100.0) * cap_gal -%}
  {%- set cur_l = convert_volume_value(cur_gal, 'gal', 'l')|float -%}
  {{ gray_name(pct) }} • {{ pct|round(0) }}%{{ ' • ' ~ cur_gal|round(1) ~ ' gal in tank (' ~ cur_l|round(0) ~ ' L)' if cap_gal > 0 else '' }}
{%- endmacro %}

{% macro gray_label_vol(current, capacity, unit='gal') -%}
  {{ gray_label_pct(pct_from_volume(current, capacity, unit), capacity, unit) }}
{%- endmacro %}

{# Time to full given inflow rate (gpm/lpm). Returns hours. #}
{% macro gray_hours_to_full(pct, capacity, inflow_rate, cap_unit='gal', flow_unit='gpm') -%}
  {%- set cap_gal = convert_volume_value(capacity, cap_unit, 'gal')|float -%}
  {%- set rem_gal = (1.0 - (pct|float / 100.0)) * cap_gal -%}
  {%- set gpm = (inflow_rate|float) if (flow_unit|string|lower) in ['gpm','gal/min'] else ((inflow_rate|float) / 3.785411784) -%}
  {{ (rem_gal / (gpm if gpm > 0 else 1e-9)) }}
{%- endmacro %}

{% macro gray_dump_soon(pct) -%}{{ (pct|float) >= 85.0 }}{%- endmacro %}
{% macro gray_full(pct) -%}{{ (pct|float) >= 95.0 }}{%- endmacro %}

{# -------------------- Black Water -------------------- #}

{% set black_names = gray_names %}
{% set black_shorts = gray_shorts %}
{% set black_longs = [
  "Black Water: Empty",
  "Black Water: Low",
  "Black Water: Quarter",
  "Black Water: Half",
  "Black Water: Three-Quarter",
  "Black Water: Near Full",
  "Black Water: Full"
] %}
{% set black_icons = [
  "mdi:toilet",
  "mdi:toilet",
  "mdi:toilet",
  "mdi:toilet",
  "mdi:toilet",
  "mdi:biohazard",
  "mdi:biohazard"
] %}
{% set black_desc = [
  "Tank empty; add some water and tank treatment after dumping.",
  "Low level.",
  "About a quarter full.",
  "About half full.",
  "About three-quarters full.",
  "Nearly full; plan to dump soon (ideal to dump when ≥2/3 for good flush).",
  "Full; dump immediately to prevent clogs or vent issues."
] %}

{% macro black_level(pct) -%}
  {{ level_find((pct|float), bps_waste) }}
{%- endmacro %}

{# djlint:off #}
{% macro black_name(pct) %}{{ black_names[black_level(pct)|int - 1] }}{% endmacro %}
{% macro black_short(pct) %}{{ black_shorts[black_level(pct)|int - 1] }}{% endmacro %}
{% macro black_long(pct) %}{{ black_longs[black_level(pct)|int - 1] }}{% endmacro %}
{% macro black_icon(pct) %}{{ black_icons[black_level(pct)|int - 1] }}{% endmacro %}
{% macro black_color(pct) %}{{ waste_colors_inv[black_level(pct)|int - 1] }}{% endmacro %}
{% macro black_desc_text(pct) %}{{ black_desc[black_level(pct)|int - 1] }}{% endmacro %}
{# djlint:on #}

{% macro black_label_pct(pct, capacity=0, unit='gal') -%}
  {%- set cap_gal = convert_volume_value(capacity, unit, 'gal')|float -%}
  {%- set cur_gal = (pct|float / 100.0) * cap_gal -%}
  {%- set cur_l = convert_volume_value(cur_gal, 'gal', 'l')|float -%}
  {{ black_name(pct) }} • {{ pct|round(0) }}%{{ ' • ' ~ cur_gal|round(1) ~ ' gal in tank (' ~ cur_l|round(0) ~ ' L)' if cap_gal > 0 else '' }}
{%- endmacro %}

{% macro black_label_vol(current, capacity, unit='gal') -%}
  {{ black_label_pct(pct_from_volume(current, capacity, unit), capacity, unit) }}
{%- endmacro %}

{% macro black_dump_soon(pct) -%}{{ (pct|float) >= 75.0 }}{%- endmacro %}
{% macro black_full(pct) -%}{{ (pct|float) >= 95.0 }}{%- endmacro %}

{# -------------------- Propane (LP) -------------------- #}

{# Percent-filled thresholds. Most tank gauges read liquid level %. #}
{% set bps_propane = [0, 5, 20, 40, 60, 80, 95] %}

{% set lp_names = ["Empty", "Critical", "Low", "Mid", "High", "Very High", "Full"] %}
{% set lp_shorts = ["Empty", "Crit", "Low", "Mid", "High", "V High", "Full"] %}
{% set lp_longs = [
  "Propane: Empty",
  "Propane: Critical",
  "Propane: Low",
  "Propane: Mid",
  "Propane: High",
  "Propane: Very High",
  "Propane: Full"
] %}
{% set lp_icons = [
  "mdi:gas-cylinder-off",
  "mdi:gas-cylinder-off",
  "mdi:gas-cylinder",
  "mdi:gas-cylinder",
  "mdi:gas-cylinder",
  "mdi:gas-cylinder",
  "mdi:gas-cylinder"
] %}
{% set lp_colors = [
  "#ef4444", "#f97316", "#f59e0b", "#eab308", "#84cc16", "#22c55e", "#10b981", "disabled"
] %}
{% set lp_desc = [
  "Empty; refill required.",
  "Critical level; refill as soon as possible.",
  "Low; schedule refill (especially in cold weather).",
  "Around halfway.",
  "Comfortable level.",
  "Plenty of propane available.",
  "Tank full."
] %}

{% macro lp_level(pct) -%}
  {{ level_find((pct|float), bps_propane) }}
{%- endmacro %}

{# djlint:off #}
{% macro lp_name(pct) %}{{ lp_names[lp_level(pct)|int - 1] }}{% endmacro %}
{% macro lp_short(pct) %}{{ lp_shorts[lp_level(pct)|int - 1] }}{% endmacro %}
{% macro lp_long(pct) %}{{ lp_longs[lp_level(pct)|int - 1] }}{% endmacro %}
{% macro lp_icon(pct) %}{{ lp_icons[lp_level(pct)|int - 1] }}{% endmacro %}
{% macro lp_color(pct) %}{{ lp_colors[lp_level(pct)|int - 1] }}{% endmacro %}
{% macro lp_desc_text(pct) %}{{ lp_desc[lp_level(pct)|int - 1] }}{% endmacro %}
{# djlint:on #}

{# LP energy math: 1 gal ≈ 91,500 BTU #}
{% macro lp_btu_from_gal(gal) -%}{{ (gal|float) * 91500.0 }}{%- endmacro %}
{% macro lp_gal_from_btu(btuh) -%}{{ (btuh|float) / 91500.0 }}{%- endmacro %}

{# Label. If tank_size_gal provided, show gallons and BTU content. #}
{% macro lp_label_pct(pct, tank_size_gal=0) -%}
  {%- set pctv = pct|float -%}
  {%- if (tank_size_gal|float) > 0 -%}
    {%- set gal_left = (pctv / 100.0) * (tank_size_gal|float) -%}
    {%- set kBTU = (lp_btu_from_gal(gal_left) / 1000.0) -%}
    {{ lp_name(pct) }} • {{ pctv|round(0) }}% • {{ gal_left|round(1) }} gal (≈ {{ kBTU|round(0) }}k BTU)
  {%- else -%}
    {{ lp_name(pct) }} • {{ pctv|round(0) }}%
  {%- endif -%}
{%- endmacro %}

{# Hours of runtime at a given BTU/h draw. #}
{% macro lp_hours_left(pct, tank_size_gal, burner_btuh) -%}
  {%- set gal_left = (pct|float / 100.0) * (tank_size_gal|float) -%}
  {%- set btus = lp_btu_from_gal(gal_left)|float -%}
  {{ btus / (burner_btuh|float if burner_btuh|float > 0 else 1e-9) }}
{%- endmacro %}

{% macro lp_refill_soon(pct) -%}{{ (pct|float) <= 30.0 }}{%- endmacro %}
{% macro lp_critical(pct) -%}{{ (pct|float) <= 10.0 }}{%- endmacro %}

{# -------------------- Composite helpers -------------------- #}

{# A unified label suitable for chips/badges. tank='fresh'|'gray'|'black'|'lp'.
   capacity optional (gal or L). For LP, capacity is tank_size_gal. #}
{% macro tank_label(tank, pct, capacity=0, unit='gal') -%}
  {%- set t = (tank|string|lower) -%}
  {%- if t == 'fresh' -%}
    {{ fresh_label_pct(pct, capacity, unit) }}
  {%- elif t == 'gray' -%}
    {{ gray_label_pct(pct, capacity, unit) }}
  {%- elif t == 'black' -%}
    {{ black_label_pct(pct, capacity, unit) }}
  {%- elif t in ['lp','propane'] -%}
    {{ lp_label_pct(pct, capacity) }}
  {%- else -%}
    {{ (pct|round(0)|string) ~ '%'}}
  {%- endif -%}
{%- endmacro %}

{# Choose icon by tank type. #}
{% macro tank_icon(tank, pct) -%}
  {%- set t = (tank|string|lower) -%}
  {%- if t == 'fresh' -%}{{ fresh_icon(pct) }}
  {%- elif t == 'gray' -%}{{ gray_icon(pct) }}
  {%- elif t == 'black' -%}{{ black_icon(pct) }}
  {%- elif t in ['lp','propane'] -%}{{ lp_icon(pct) }}
  {%- else -%}mdi:tank
  {%- endif -%}
{%- endmacro %}

{# Choose color by tank type. #}
{% macro tank_color(tank, pct) -%}
  {%- set t = (tank|string|lower) -%}
  {%- if t == 'fresh' -%}{{ fresh_color(pct) }}
  {%- elif t == 'gray' -%}{{ gray_color(pct) }}
  {%- elif t == 'black' -%}{{ black_color(pct) }}
  {%- elif t in ['lp','propane'] -%}{{ lp_color(pct) }}
  {%- else -%}'disabled'
  {%- endif -%}
{%- endmacro %}

{# Simple guidance line per tank type. #}
{% macro tank_advice(tank, pct) -%}
  {%- set t = (tank|string|lower) -%}
  {%- if t == 'fresh' -%}
    {%- if fresh_critical(pct) -%}Refill water immediately.{%- elif fresh_low(pct) -%}Conserve water and plan a refill.{%- else -%}Fresh water level is adequate.{%- endif -%}
  {%- elif t == 'gray' -%}
    {%- if gray_full(pct) -%}Gray tank full—dump now.{%- elif gray_dump_soon(pct) -%}Gray tank near full—dump soon.{%- else -%}Gray water level is acceptable.{%- endif -%}
  {%- elif t == 'black' -%}
    {%- if black_full(pct) -%}Black tank full—dump now.{%- elif black_dump_soon(pct) -%}Black tank near full—dump soon (≥2/3 ideal for flush).{%- else -%}Black water level is acceptable.{%- endif -%}
  {%- elif t in ['lp','propane'] -%}
    {%- if lp_critical(pct) -%}Propane critical—refill now.{%- elif lp_refill_soon(pct) -%}Propane low—plan a refill.{%- else -%}Propane level is adequate.{%- endif -%}
  {%- else -%}
    --
  {%- endif -%}
{%- endmacro %}
