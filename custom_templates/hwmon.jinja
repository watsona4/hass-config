{# ──────────────────────────────────────────────────────────────
   custom_templates/hwmon.jinja
   Reusable macros for Hardware Monitor cards
   ────────────────────────────────────────────────────────────── #}

{%- from 'helpers.jinja' import convert_temp_value, smartfmt -%}

{%- macro humanize_unit(n, unit='', system='') -%}
  {# If no unit passed, just smart format the number #}
  {%- if not unit or unit|trim == '' -%}
    {{ smartfmt(n) }}
  {%- else -%}
    {%- set ns = namespace(
          sgn = -1 if (n|float(0)) < 0 else 1,
          v = (n|float(0)) | abs,
          unit = unit|string|trim,
          base_unit = '',
          system = (system or '')|lower,
          pref_out = ''
        ) -%}

    {# SI and IEC prefix tables #}
    {%- set si_list = [
          ('da', 1e1), ('Y', 1e24), ('Z', 1e21), ('E', 1e18), ('P', 1e15),
          ('T', 1e12), ('G', 1e9),  ('M', 1e6),  ('k', 1e3),  ('h', 1e2),
          ('d', 1e-1), ('c', 1e-2), ('m', 1e-3), ('µ', 1e-6), ('u', 1e-6),
          ('n', 1e-9), ('p', 1e-12), ('f', 1e-15), ('a', 1e-18),
          ('z', 1e-21), ('y', 1e-24)
        ] -%}
    {%- set iec_list = [
          ('Yi', 2**80), ('Zi', 2**70), ('Ei', 2**60), ('Pi', 2**50), ('Ti', 2**40),
          ('Gi', 2**30), ('Mi', 2**20), ('Ki', 2**10)
        ] -%}

    {# detect prefix in unit #}
    {%- set det = namespace(kind='', pref='', factor=1.0) -%}
    {%- for p, mult in iec_list -%}
      {%- if ns.unit.startswith(p) and (ns.unit|length) > (p|length) -%}
        {%- set det.kind = 'iec' -%}
        {%- set det.pref = p -%}
        {%- set det.factor = mult -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}
    {%- if not det.kind -%}
      {%- for p, mult in si_list -%}
        {%- if ns.unit.startswith(p) and (ns.unit|length) > (p|length) -%}
          {%- set det.kind = 'si' -%}
          {%- set det.pref = p -%}
          {%- set det.factor = mult -%}
          {%- break -%}
        {%- endif -%}
      {%- endfor -%}
    {%- endif -%}

    {# peel prefix and normalize value #}
    {%- set ns.base_unit = ns.unit[det.pref|length:] if det.pref else ns.unit -%}
    {%- set ns.v = ns.v * det.factor -%}

    {# system resolution (explicit > preserved > defaults) #}
    {%- if ns.system in ['si','iec'] -%}
    {%- else -%}
      {%- set base_token = ns.base_unit.split('/', 1)[0] -%}
      {%- set base_token_l = base_token|lower -%}
      {%- set is_bytes = base_token_l in ['b','byte','bytes'] and base_token[:1] == 'B' -%}
      {%- set is_bits  = base_token_l in ['b','bit','bits'] and base_token[:1] == 'b' -%}
      {%- if det.kind == 'iec' -%}
        {%- set ns.system = 'iec' -%}
      {%- elif det.kind == 'si' -%}
        {%- set ns.system = 'si' -%}
      {%- elif is_bytes -%}
        {%- set ns.system = 'iec' -%}
      {%- elif is_bits -%}
        {%- set ns.system = 'si' -%}
      {%- else -%}
        {%- set ns.system = 'si' -%}
      {%- endif -%}
    {%- endif -%}

    {# scale #}
    {%- if ns.system == 'iec' -%}
      {%- set base = 1024.0 -%}
      {%- set prefixes = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi'] -%}
      {%- set idx = namespace(i=0) -%}
      {%- for _ in range(prefixes|length - 1) -%}
        {%- if ns.v < base -%}{%- break -%}{%- endif -%}
        {%- set ns.v = ns.v / base -%}
        {%- set idx.i = idx.i + 1 -%}
      {%- endfor -%}
      {%- set ns.pref_out = prefixes[idx.i] -%}
    {%- else -%}
      {%- set base = 1000.0 -%}
      {%- set prefixes = ['y','z','a','f','p','n','µ','m','','k','M','G','T','P','E','Z','Y'] -%}
      {%- set idx = namespace(i=8) -%}
      {%- for _ in range(prefixes|length - 1) -%}
        {%- if ns.v < base or idx.i >= prefixes|length - 1 -%}{%- break -%}{%- endif -%}
        {%- set ns.v = ns.v / base -%}
        {%- set idx.i = idx.i + 1 -%}
      {%- endfor -%}
      {%- for _ in range(prefixes|length - 1) -%}
        {%- if ns.v >= 1 or idx.i <= 0 or ns.v == 0 -%}{%- break -%}{%- endif -%}
        {%- set ns.v = ns.v * base -%}
        {%- set idx.i = idx.i - 1 -%}
      {%- endfor -%}
      {%- set ns.pref_out = prefixes[idx.i] -%}
    {%- endif -%}

    {# format #}
    {%- set out = (ns.v if ns.v < 100 else ns.v|round(0))|round(1) -%}
    {{ (out * ns.sgn) }} {{ ns.pref_out }}{{ ns.base_unit }}
  {%- endif -%}
{%- endmacro -%}

{% macro hw_primary(eid) %}
  {%- set fn = state_attr(eid, 'friendly_name') or eid -%}
  {%- set parts = (fn or '') .split(' / ') -%}
  {{ parts[-2:] | join(' · ') if parts|length > 1 else fn }}
{% endmacro %}

{% macro hw_secondary(eid, temp='c') %}
  {%- set val = states(eid) -%}
  {%- set unit = state_attr(eid,'unit_of_measurement') -%}
  {%- set temp_units = {'k': 'K', 'f': '°F', 'c': '°C'} %}
  {%- set dc = state_attr(eid,'device_class') -%}

  {#- temperature sensors → always celsius -#}
  {%- if dc == 'temperature' -%}
    {%- set t = convert_temp_value(val, unit or 'c', temp) | float(0) -%}
    {{ t | round(1) }} {{ temp_units[temp] }}
  {%- else -%}
    {{ humanize_unit(val, unit) }}
  {%- endif -%}
{% endmacro %}

{% macro hw_icon(eid) %}
  {%- set dc = state_attr(eid, 'device_class') -%}
  {%- if dc == 'temperature' -%} mdi:thermometer
  {%- elif dc == 'voltage' -%} mdi:flash-outline
  {%- elif dc == 'power' -%} mdi:lightning-bolt-outline
  {%- elif 'clock' in eid -%} mdi:chip
  {%- elif 'load' in eid or 'level' in eid -%} mdi:gauge
  {%- else -%} mdi:database
  {%- endif -%}
{% endmacro %}

{% macro hw_icon_color(eid) %}
  {%- set dc = state_attr(eid,'device_class') -%}
  {%- set raw = states(eid) -%}
  {%- set unit = state_attr(eid,'unit_of_measurement') -%}
  {%- if dc == 'temperature' -%}
    {% set t = convert_temp_value(raw, unit or 'c', 'c') | float(0) %}
    {{ 'red' if t >= 90 else 'orange' if t >= 80 else 'green' }}
  {%- elif unit == '%' or 'percent' in eid -%}
    {% set v = raw|float(0) %}
    {{ 'red' if v >= 90 else 'orange' if v >= 75 else 'green' }}
  {%- else -%}
    blue
  {%- endif -%}
{% endmacro %}

{% macro hw_adapter_name(eid) %}
  {%- set fn = state_attr(eid, 'friendly_name') or '' -%}
  {%- set parts = fn.split(' / ') -%}
  {%- if parts|length > 0 -%}
    {{ (parts[0].split(' LHM ')[1] or '').strip() }}
  {%- else -%}
    Network
  {%- endif -%}
{% endmacro %}

{% macro hw_sensor_label(eid) %}
  {%- set fn = state_attr(eid, 'friendly_name') or '' -%}
  {%- set parts = fn.split(' / ') -%}
  {%- if parts|length > 1 -%}
    {{ parts[-1] }}
  {%- else -%}
    {{ fn }}
  {%- endif -%}
{% endmacro %}
