{# # File: config/custom_templates/weather/heat_index.jinja ## #}
{# Macros for Heat Index calculation, levels, icons, colors, and guidance #}

{% from 'helpers.jinja' import convert_temp_value, level_find %}

{# Breakpoints for Heat Index categories, in °C (lower bounds of each band) #}
{# Based on NOAA thresholds: <80°F Comfort, 80–90 Caution, 90–103 Extreme Caution, 103–125 Danger, 125+ Extreme Danger #}
{% set bps = [-50, 26.7, 32.2, 39.4, 51.7] %}

{# Names for categories #}
{% set names = ["Comfort", "Caution", "Extreme Caution", "Danger", "Extreme Danger"] %}

{# Short names for compact UIs #}
{% set shorts = ["Comfort", "Caution", "X Caution", "Danger", "X Danger"] %}

{# Long names for descriptive titles #}
{% set longs = [
    "Comfort Heat Index",
    "Caution Heat Index",
    "Extreme Caution Heat Index",
    "Danger Heat Index",
    "Extreme Danger Heat Index"
] %}

{# Icons for categories #}
{% set icons = ['mdi:thermometer', 'mdi:white-balance-sunny', 'mdi:weather-sunny-alert', 'mdi:fire', 'mdi:alert-decagram'] %}

{# Colors for categories: green to yellow to orange to red to purple #}
{% set colors = ['#10b981', '#eab308', '#f59e0b', '#dc2626', '#7c3aed', 'disabled'] %}

{# Descriptions for each level #}
{% set descriptions = [
    "Little risk for the general population.",
    "Fatigue possible with prolonged exposure or activity.",
    "Heat cramps and heat exhaustion possible; hydrate and take breaks.",
    "Heat cramps and heat exhaustion likely; heat stroke possible.",
    "Heat stroke highly likely with continued exposure; avoid strenuous activity."
] %}

{# -------------------- Heat Index calculation -------------------- #}
{# Returns Heat Index in °F using NOAA Rothfusz regression with adjustments #}
{% macro hi_f(t_f, rh_pct) -%}
    {%- set T = t_f|float -%}
    {%- set RH = rh_pct|float -%}
    {%- set RH = 0 if RH < 0 else (100 if RH > 100 else RH) -%}

    {# Simple approximation for T < 80°F #}
    {%- if T < 80 -%}
        {{ 0.5 * (T + 61.0 + ((T - 68.0) * 1.2) + (RH * 0.094)) }}
    {%- else -%}
        {# Rothfusz regression #}
        {%- set HI = (
                -42.379
                + 2.04901523 * T
                + 10.14333127 * RH
                - 0.22475541 * T * RH
                - 0.00683783 * T * T
                - 0.05481717 * RH * RH
                + 0.00122874 * T * T * RH
                + 0.00085282 * T * RH * RH
                - 0.00000199 * T * T * RH * RH
                ) -%}

        {# Low humidity adjustment: RH < 13% and 80–112°F #}
        {%- if RH < 13 and 80 <= T <= 112 -%}
            {%- set adj = ((13 - RH) / 4.0) * (((17 - (T - 95)|abs) / 17.0) ** 0.5) -%}
            {%- set HI = HI - adj -%}
        {%- endif -%}

        {# High humidity adjustment: RH > 85% and 80–87°F #}
        {%- if RH > 85 and 80 <= T <= 87 -%}
            {%- set adj = ((RH - 85) / 10.0) * ((87 - T) / 5.0) -%}
            {%- set HI = HI + adj -%}
        {%- endif -%}

        {{ HI }}
    {%- endif -%}
{%- endmacro %}

{# Wrapper that returns Heat Index in requested unit.
   Assume input temperature unit is Fahrenheit by default. #}
{% macro hi(t, rh_pct, unit='f') -%}
    {%- set Tf = convert_temp_value(t, unit, 'f')|float -%}
    {%- set hif = hi_f(Tf, rh_pct)|float -%}
    {{ convert_temp_value(hif, 'f', unit) }}
{%- endmacro %}

{# -------------------- Categorization helpers -------------------- #}
{# Categorize a known Heat Index value #}
{% macro level(hi_value, unit='f') -%}
    {%- set v = convert_temp_value(hi_value, unit, 'c')|float -%}
    {%- set v = -50 if v < -50 else (80 if v > 80 else v) -%}
    {{ level_find(v, bps) }}
{%- endmacro %}

{# Categorize from temperature and RH directly #}
{% macro level_from(t, rh_pct, unit='f') -%}
    {{ level(hi(t, rh_pct, unit) , unit) }}
{%- endmacro %}

{# -------------------- Wrappers by Heat Index value -------------------- #}
{# djlint:off #}
{% macro name(hi_value, unit='f') %}{{ names[level(hi_value, unit)|int - 1] }}{% endmacro %}
{% macro short(hi_value, unit='f') %}{{ shorts[level(hi_value, unit)|int - 1] }}{% endmacro %}
{% macro long(hi_value, unit='f') %}{{ longs[level(hi_value, unit)|int - 1] }}{% endmacro %}
{% macro icon(hi_value, unit='f') %}{{ icons[level(hi_value, unit)|int - 1] }}{% endmacro %}
{% macro desc(hi_value, unit='f') %}{{ descriptions[level(hi_value, unit)|int - 1] }}{% endmacro %}
{% macro color(hi_value, unit='f') %}{{ colors[level(hi_value, unit)|int - 1] }}{% endmacro %}
{# djlint:on #}

{# -------------------- Convenience wrappers from T and RH -------------------- #}
{# djlint:off #}
{% macro name_from(t, rh_pct, unit='f') %}{{ names[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{% macro short_from(t, rh_pct, unit='f') %}{{ shorts[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{% macro long_from(t, rh_pct, unit='f') %}{{ longs[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{% macro icon_from(t, rh_pct, unit='f') %}{{ icons[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{% macro desc_from(t, rh_pct, unit='f') %}{{ descriptions[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{% macro color_from(t, rh_pct, unit='f') %}{{ colors[level_from(t, rh_pct, unit)|int - 1] }}{% endmacro %}
{# djlint:on #}
