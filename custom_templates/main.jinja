{#- Device class wrapper template for automatic template selection based on entity device class -#}

{% import 'helpers.jinja' as H  with context %}

{% macro get_device_state_info(entity_id, app, options={}) %}

    {#- Parse options if given as a string -#}
    {%- set options = H.parse_options_kv(options) | from_json if options is string else options -%}

    {#- Get the entity's device class if it exists, otherwise use 'none' -#}
    {%- set ns = namespace(device_class=none) -%}
    {%- set ns.device_class = state_attr(entity_id, 'device_class') or options.get('device_class') or 'none' -%}

    {#- domain convenience -#}
    {%- set domain = entity_id.split('.', 1)[0] -%}

    {#- if this is a binary_sensor with no device_class, use synthetic 'binary' -#}
    {%- if domain in ['binary_sensor', 'input_boolean'] -%}
        {%- set ns.device_class = "binary" -%}
    {%- endif -%}

    {#- Raw & numeric value (preserve 'unavailable' instead of coercing to 0) -#}
    {%- set raw_state = states(entity_id) -%}
    {%- set value = raw_state|bool if ns.device_class == 'binary' else raw_state|float(none) -%}

    {#- Meta & units -#}
    {%- set friendly_name = state_attr(entity_id, 'friendly_name') -%}
    {%- set uom = options.get('uom', state_attr(entity_id, 'unit_of_measurement') | default(none)) -%}
    {%- set display_unit = options.get('unit', uom) -%}

    {#- Import the appropriate template based on device class -#}
    {#- djlint:off -#}
    {%- set valid_classes = [
        "none",
        "absolute_humidity",
        "aqi",
        "apparent_power",
        "atmospheric_pressure",
        "battery",
        "blood_glucose_concentration",
        "binary",
        "carbon_dioxide",
        "carbon_monoxide",
        "current",
        "data_rate",
        "data_size",
        "date",
        "distance",
        "duration",
        "energy",
        "energy_distance",
        "energy_storage",
        "enum",
        "frequency",
        "gas",
        "humidity",
        "illuminance",
        "irradiance",
        "moisture",
        "monetary",
        "nitrogen_dioxide",
        "nitrogen_monoxide",
        "nitrous_oxide",
        "none",
        "ozone",
        "ph",
        "pm1",
        "pm10",
        "pm25",
        "power_factor",
        "power",
        "precipitation",
        "precipitation_intensity",
        "pressure",
        "reactive_energy",
        "reactive_power",
        "signal_strength",
        "sound_pressure",
        "speed",
        "sulphur_dioxide",
        "temperature",
        "timestamp",
        "volatile_organic_compounds",
        "volatile_organic_compounds_parts",
        "voltage",
        "volume",
        "volume_flow_rate",
        "volume_storage",
        "water",
        "weight",
        "wind_direction",
        "wind_speed"
    ] -%}
    {#- djlint:on -#}

    {#- Ensure we have a valid device class, fallback to 'none' if not -#}
    {%- if ns.device_class not in valid_classes -%}
        {%- set ns.device_class = "none" -%}
    {%- endif -%}

    {#- Import the device class template -#}
    {%- import 'device_class/' ~ ns.device_class ~ '.jinja' as DC with context -%}
    {%- set dc = DC.get_dc_context() | from_json -%}
    {%- set lookup_unit = dc.lookup_unit -%}
    {%- set levels = dc.levels -%}

    {%- set is_unavail = (
        raw_state is string
        and (raw_state | trim | lower) in ['unavailable','unknown','none','null','nan']
        ) or (raw_state is not string and raw_state is none) -%}

    {#- Create options dict with unit info for the getters -#}
    {%- set enhanced_options = dict(
        options,
        friendly_name=friendly_name,
        uom=uom,
        display_unit=display_unit,
        raw_state=raw_state,
        levels=levels,
        lookup_unit=lookup_unit,
        is_unavail=is_unavail,
    ) -%}

    {%- set value_text = (DC.get_value(value, app, enhanced_options) if DC.get_value is defined
        else H.get_value(value, app, enhanced_options) if ns.device_class != 'binary' else state_translated(entity_id)) -%}
    {%- set name = (DC.get_name(value, app, enhanced_options) if DC.get_name is defined
        else H.get_name(value, app, enhanced_options)) -%}
    {%- set def_desc = (DC.get_default_desc(value, app, enhanced_options) if DC.get_default_desc is defined
        else H.get_default_desc(value, app, enhanced_options)) -%}
    {%- set short_desc = (DC.get_short_desc(value, app, enhanced_options) if DC.get_short_desc is defined
        else H.get_short_desc(value, app, enhanced_options)) -%}
    {%- set long_desc = (DC.get_long_desc(value, app, enhanced_options) if DC.get_long_desc is defined
        else H.get_long_desc(value, app, enhanced_options)) -%}
    {%- set full_desc = (DC.get_full_desc(value, app, enhanced_options) if DC.get_full_desc is defined
        else H.get_full_desc(value, app, enhanced_options)) -%}
    {%- set icon = (DC.get_icon(value, app, enhanced_options) if DC.get_icon is defined
        else H.get_icon(value, app, enhanced_options)) -%}
    {%- set color = (DC.get_color(value, app, enhanced_options) if DC.get_color is defined
        else H.get_color(value, app, enhanced_options)) -%}
    {%- set badge = (DC.get_badge(value, app, enhanced_options) if DC.get_badge is defined
        else H.get_badge(value, app, enhanced_options)) -%}
    {%- set badge_color = (DC.get_badge_color(value, app, enhanced_options) if DC.get_badge_color is defined
        else H.get_badge_color(value, app, enhanced_options)) -%}

    {%- set delim = options.get('delim',' â€¢ ') -%}
    {%- set vertical = options.get('vertical', false) -%}
    {%- set vert_delim = options.get('vert_delim','\n') -%}
    {%- set binary = ns.device_class == 'binary' -%}

    {%- set label = (DC.get_label(value, app, enhanced_options) if DC.get_label is defined
        else H.format_label(value_text, def_desc, is_unavail, long_desc, delim, vertical, vert_delim, binary)) -%}
    {%- set short_label = (DC.get_short_label(value, app, enhanced_options) if DC.get_short_label is defined
        else H.format_short_label(value_text, short_desc, is_unavail, long_desc, delim, vertical, vert_delim, binary)) -%}
    {%- set long_label = (DC.get_long_label(value, app, enhanced_options,) if DC.get_long_label is defined
        else H.format_long_label(value_text, long_desc, is_unavail, delim, vertical, vert_delim, binary)) -%}

    {#- Return a dictionary with all the relevant information -#}
    {{- {
        'value': value_text,
        'name': name,
        'default_desc': def_desc,
        'short_desc': short_desc,
        'long_desc': long_desc,
        'full_desc': full_desc,
        'icon': icon,
        'color': color,
        'badge': badge,
        'badge_color': badge_color,
        'label': label,
        'short_label': short_label,
        'long_label': long_label,
        'options': options,
        'friendly_name': friendly_name,
        'uom': uom,
        'display_unit': display_unit,
        'raw_state': raw_state,
        'is_unavail': is_unavail,
    } | tojson -}}

{% endmacro %}

{#- Helper macro to get specific attribute -#}
{% macro get_attribute(entity_id, app, attribute, options={}) %}
    {%- set info = get_device_state_info(entity_id, app, options) | from_json -%}
    {{- info[attribute] -}}
{% endmacro %}

{#- ---- convenience wrappers ---- -#}
{% macro get_value(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'value', options) -}}
{% endmacro %}
{% macro get_name(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'name', options) -}}
{% endmacro %}
{% macro get_default_desc(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'default_desc', options) -}}
{% endmacro %}
{% macro get_short_desc(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'short_desc', options) -}}
{% endmacro %}
{% macro get_long_desc(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'long_desc', options) -}}
{% endmacro %}
{% macro get_full_desc(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'full_desc', options) -}}
{% endmacro %}
{% macro get_icon(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'icon', options) -}}
{% endmacro %}
{% macro get_color(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'color', options) -}}
{% endmacro %}
{% macro get_badge(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'badge', options) -}}
{% endmacro %}
{% macro get_badge_color(entity_id, app='default', options={}) %}
    {{- get_attribute(entity_id, app, 'badge_color', options) -}}
{% endmacro %}

{#- ---- labels now use helpers for fallback formatting ---- -#}
{% macro get_label(entity_id, app='default', options={}) %}
    {%- set info = get_device_state_info(entity_id, app, options) | from_json -%}
    {%- if info.label and info.label|trim != '' -%}
        {{- info.label -}}
    {%- else -%}
        {{- H.format_label(info.value, info.default_desc, info.is_unavail, info.long_desc) -}}
    {%- endif -%}
{% endmacro %}

{% macro get_short_label(entity_id, app='default', options={}) %}
    {%- set info = get_device_state_info(entity_id, app, options) | from_json -%}
    {%- if info.short_label and info.short_label|trim != '' -%}
        {{- info.short_label -}}
    {%- else -%}
        {{- H.format_short_label(info.value, info.default_desc, info.is_unavail, info.long_desc) -}}
    {%- endif -%}
{% endmacro %}

{% macro get_long_label(entity_id, app='default', options={}) %}
    {%- set info = get_device_state_info(entity_id, app, options) | from_json -%}
    {%- if info.long_label and info.long_label|trim != '' -%}
        {{- info.long_label -}}
    {%- else -%}
        {{- H.format_long_label(info.value, info.default_desc, info.is_unavail, info.long_desc) -}}
    {%- endif -%}
{% endmacro %}
